<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LincentMa&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lincentma.men/"/>
  <updated>2017-07-26T10:43:03.709Z</updated>
  <id>http://lincentma.men/</id>
  
  <author>
    <name>LicentMa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习《阿里巴巴Java开发手册》</title>
    <link href="http://lincentma.men/learn_alibaba_java.html"/>
    <id>http://lincentma.men/learn_alibaba_java.html</id>
    <published>2017-07-23T08:24:02.000Z</published>
    <updated>2017-07-26T10:43:03.709Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>经验，是提高自己的重要途径之一。</p>
</blockquote>
<h1 id="学习笔记："><a href="#学习笔记：" class="headerlink" title="学习笔记："></a>学习笔记：</h1><h2 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h2><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><ol>
<li>“骆驼拼写法”分为两种。第一个词的首字母小写，后面每个词的首字母大写，叫做“小骆驼拼写法”（lowerCamelCase）；第一个词的首字母，以及后面每个词的首字母都大写，叫做“大骆驼拼写法”（UpperCamelCase），又称“帕斯卡拼写法”。类名大骆驼，方法名、参数名、成员变量、局部变量都是小骆驼。</li>
<li>POJO类（只有getter和setter方法的简单类）：布尔类型变量不要加is，否则会引起部分框架解析引起序列化错误。</li>
<li>接口类的方法和属性不要加任何修饰符号，包括public。JDK8允许接口有默认实现，default方法。</li>
<li>基于SOA理念，暴露出来的一定是接口，内部实现类加Impl后缀。</li>
</ol>
<h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><ol>
<li><p>常量的复用层次：<br> 跨应用共享常量<br> 应用内共享常量<br> 子工程内共享常量<br> 包内共享常量<br> 类内共享常量： private static final</p>
</li>
<li><p>变量值在范围内变化，设置为枚举类。成员名称全部大写。</p>
</li>
</ol>
<h3 id="OOP规约"><a href="#OOP规约" class="headerlink" title="OOP规约"></a>OOP规约</h3><ol>
<li><p>直接通过类名访问类的静态变量和静态方法，而不是通过类的对象，增加编译器的解析成本。</p>
</li>
<li><p>所有覆写方法都必须加上@override注解。</p>
</li>
<li><p>所有相同类型的包装对象之间的值的比较，通过equals方法。</p>
<p> 原因：Integer在128  127 分为内的复制，Integer对象是在IntegerCache.cache产生，会复用已有的对象，区间之外的所有数据都在堆上产生，并不会复用已有对象。<br> == 不仅比较值的大小，还比较对象的地址。</p>
</li>
<li><p>POJO类属性必须使用包装类型，返回值和参数也必须使用包装数据类型。预防NPE现象。</p>
<p> | 基本类型    | 包装器类型     |<br> |:—–|:—–|<br> | boolean | Boolean   |<br> | char    | Character |<br> | int     | Integer   |<br> | byte    | Byte      |<br> | short   | Short     |<br> | long    | Long      |<br> | float   | Float     |<br> | double  | Double    |</p>
</li>
<li><p>使用索引访问String的split方法，需要对最后一个分隔符后面有无内容进行检查，否则会报IndexOutOfBoundsException。</p>
<p>public String[] split(String regex,int limit)方法：split(String regex) 方法，其实也就等同于split(String regex，0)方法，把结尾的空字符串丢弃！ </p>
<p>可以使用split(“分隔符”,1)或者是org.apache.commons.lang.StringUtils提供的split</p>
<p>参考文章：<a href="http://yinny.iteye.com/blog/1750210" target="_blank" rel="external">java 字符串split有很多坑，使用时请小心！！</a></p>
</li>
<li><p>循环体内字符串的链接方式：</p>
<p> 用String和“+”：因为“+”拼接字符串，每拼接一次都是再内存重新开辟一个新的内存区域（堆里边）,然后把得到的新的字符串存在这块内存，很容易引起内存溢出。<br> 使用StringBuilder的append方法进行扩展。是在已有的内存空间追加的字符串。<br> commonlang工具包的StringUtils.join(list,”,”);来一步实现这个拼接而且还能指定分隔的符号。</p>
</li>
<li><p>对象的clone方法默认是前拷贝，实现深拷贝需要重写clone方法。</p>
<p> 基本数据类型的拷贝是没有意义的，String类型这样的引用的拷贝才是有意义的。<br> 需要注意的是，如果在拷贝一个对象时，要想让这个拷贝的对象和源对象完全彼此独立，那么在引用链上的每一级对象都要被显式的拷贝。所以创建彻底的深拷贝是非常麻烦的，尤其是在引用关系非常复杂的情况下， 或者在引用链的某一级上引用了一个第三方的对象， 而这个对象没有实现clone方法， 那么在它之后的所有引用的对象都是被共享的。<br> 参考文章：<a href="http://www.importnew.com/16094.html" target="_blank" rel="external">详解Java中的clone方法 — 原型模式</a></p>
</li>
</ol>
<h3 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h3><ol>
<li><p>只要重写equals方法，就必须重写hashCode。</p>
<p> 为了保证同一个对象，保证在equals相同的情况下hashcode值必定相同，如果重写了equals而未重写hashcode方法，可能就会出现两个没有关系的对象equals相同的（因为equal都是根据对象的特征进行重写的），但hashcode确实不相同的。<br> Set存放不重复队形，先比较hashCode，再用equals比较，提高效率。<br> String两个方法都重写了，放心使用。<br> 参考文章：<a href="http://www.cnblogs.com/expiator/p/6064974.html" target="_blank" rel="external">为什么重写equals时必须重写hashCode方法？</a></p>
</li>
<li><p>ArrayList之subList：</p>
<p> Java.util.List中有一个subList方法，用来返回一个list的一部分的视图。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span>;</div></pre></td></tr></table></figure>
<p> 它返回原来list的从[fromIndex, toIndex)之间这一部分的List(下面称之为sublist)，但是这个sublist是依赖于原来的List集合。</p>
<p> 在subList中进行了结构性修改（list大小修改），原来的list的大小也会发生变化，抛出一个ConcurrentModificationException。</p>
</li>
<li><p>集合转为数组的方法，必须使用集合的toArray(T[] array)，类型与大小完全一致。</p>
<p> 不带参数的toArray方法，是构造的一个Object数组，然后进行数据拷贝，此时进行转型就会产生ClassCastException。</p>
</li>
<li><p>Arrays.asList()数组转为集合方法，不能使用挂起修改集合相关的方法，如add、remove、clear等，会抛出UnsupportedOperationException异常。</p>
<p>  设计模式：适配器模式。只是转换接口，后台的数据仍是数组。</p>
<p>   Arrays.asList方法返回的ArrayList是继承自AbstractList同时实现了RandomAccess和Serializable接口，AbstractList定义add等方法抛出异常。</p>
<p>   解决方法：</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="keyword">int</span> i[]=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;  </div><div class="line">Arrays.asList(ArrayUtils.toObject(i));</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>Java泛型通配符PECS原则：</p>
<p> 如果要从集合中读取类型T的数据，并且不能写入，可以使用 ? extends 通配符；(Producer Extends)</p>
<p> 如果要从集合中写入类型T的数据，并且不需要读取，可以使用 ? super 通配符；(Consumer Super)</p>
<p> 如果既要存又要取，那么就不要使用任何通配符。</p>
</li>
<li><p>不要在foreach循环中进行元素的remove/add操作。如果要remove，需在Iterator中。如果并发，需给Iterator加锁。</p>
<p> List类会在内部维护一个modCount的变量，用来记录修改次数。</p>
<p> 每生成一个Iterator，Iterator就会记录该modCount，每次调用next()方法就会将该记录与外部类List的modCount进行对比，发现不相等就会抛出多线程编辑异常。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//foreach和迭代器的hasNext()方法，foreach这个语法糖，实际上就是</span></div><div class="line"><span class="keyword">while</span>(itr.hasNext())&#123;</div><div class="line">    itr.next()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> cursor != size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> cursor是用于标记迭代器位置的变量，该变量由0开始，每次调用next执行+1操作。</p>
<blockquote>
<p>你的代码在执行删除“1”后，size=1，cursor=1，此时hasNext()返回false，结束循环，因此你的迭代器并没有调用next查找第二个元素，也就无从检测modCount了，因此也不会出现多线程修改异常<br>但当你删除“2”时，迭代器调用了两次next，此时size=1，cursor=2，hasNext()返回true，于是迭代器傻乎乎的就又去调用了一次next()，因此也引发了modCount不相等，抛出多线程修改的异常。</p>
<p>当你的集合有三个元素的时候，你就会神奇的发现，删除“1”是会抛出异常的，但删除“2”就没有问题了，究其原因，和上面的程序执行顺序是一致的。</p>
</blockquote>
<p> 参考文章：<a href="https://segmentfault.com/q/1010000008858681" target="_blank" rel="external">为什么java不要在foreach循环里进行元素的remove/add操作</a></p>
</li>
<li><p>在 JDK 7 版本以上， Comparator 要满足自反性，传递性，对称性，不然 Arrays.sort ，Collections.sort 会报 IllegalArgumentException 异常。</p>
<p>  保证等于和大小与分开，要严格有序。</p>
<p>  Comparable 是排序接口。若一个类实现了Comparable接口，就意味着“<strong>该类支持排序</strong>”。</p>
<p>   Comparable 接口仅仅只包括一个函数：</p>
<p>  Comparator 是比较器接口。我们若需要控制某个类的次序，而该类本身不支持排序(即没有实现Comparable接口)，可以通过“<strong>实现Comparator类来新建一个比较器</strong>”，然后通过该比较器对类进行排序。</p>
<p>  Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>集合初始化，指定集合的初始值大小。</p>
<p> Collection的初始容量也显得异常重要。所以：对于已知的情景，请为集合指定初始容量。</p>
<p>  HashMap初始化容量计算 = （需要存储元素的个数 / 负载因子） + 1</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// ArrayList新容量扩大到原容量的1.5倍，右移一位相关于原数值除以2。</div><div class="line">int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</div><div class="line">//Vector线程安全，速度慢。默认初始容量为10，加载因子为1：即当 元素个数 超过 容量长度 时，进行扩容扩容增量：原容量的1倍</div><div class="line">int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ? capacityIncrement : oldCapacity);</div><div class="line">//HashMap</div><div class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</div><div class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f;</div><div class="line">if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr &lt;&lt; 1;</div><div class="line">//HashTable</div><div class="line">int newCapacity = oldCapacity * 2 + 1;</div><div class="line">//StringBuilder</div><div class="line">void expandCapacity(int minimumCapacity) &#123;  </div><div class="line">        int newCapacity = value.length * 2 + 2;  </div><div class="line">        if (newCapacity  minimumCapacity &lt; 0)  </div><div class="line">            newCapacity = minimumCapacity;  </div><div class="line">        if (newCapacity &lt; 0) &#123;  </div><div class="line">            if (minimumCapacity &lt; 0) // overflow  </div><div class="line">                throw new OutOfMemoryError();  </div><div class="line">            newCapacity = Integer.MAX_VALUE;  </div><div class="line">        &#125;  </div><div class="line">        value = Arrays.copyOf(value, newCapacity);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> | 集合名称                        | 默认容量 | 加载因子 | 扩容容量(扩大到原来的) |<br> |:—–|:—–|:—–|:—–|<br> | ArrayList                   | 10   | 1    | 1.5          |<br> | Vector                      | 10   | 1    | 2            |<br> | HashSet                     | 16   | 0.75 | 2            |<br> | HashMap                     | 16   | 0.75 | 2            |<br> | HashTable                   | 11   | 0.75 | <em>2 +1        |<br> | StringBuilder（StringBuffer） | 16   | 条件判断 | </em>2+2         |</p>
</li>
<li><p>遍历Map类，使用entrySet。</p>
<p>同时遍历key和value时，keySet与entrySet方法的性能差异取决于key的具体情况，如复杂度（复杂对象）、离散度、冲突率等。换言之，取决于HashMap查找value的开销。entrySet一次性取出所有key和value的操作是有性能开销的，当这个损失小于HashMap查找value的开销时，entrySet的性能优势就会体现出来。</p>
<p>同时遍历key和value时，与HashMap不同，entrySet的性能远远高于keySet。这是由TreeMap的查询效率决定的，也就是说，TreeMap查找value的开销较大，明显高于entrySet一次性取出所有key和value的开销。因此，遍历TreeMap时强烈推荐使用entrySet方法。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//keySet遍历2次，一次转为Iterator对象，一次从HashMap中取出对应的value</span></div><div class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">    value = map.get(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">//entrySet</span></div><div class="line"><span class="keyword">for</span> (Entry&lt;String, String&gt; entry: map.entrySet()) &#123;</div><div class="line">    key = entry.getKey();</div><div class="line">    value = entry.getValue();</div><div class="line">&#125;</div><div class="line"><span class="comment">//for循环</span></div><div class="line"><span class="keyword">for</span> (String value : map.values()) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">//JDK8 增强for循环</span></div><div class="line">Map&lt;String, Integer&gt; items = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">items.forEach((k,v)&gt;System.out.println(<span class="string">"key : "</span> + k + <span class="string">"; value : "</span> + v));</div></pre></td></tr></table></figure>
<p> 参考文章：<a href="http://www.cnblogs.com/fczjuever/archive/2013/04/07/3005997.html" target="_blank" rel="external">Java Map遍历方式的选择</a></p>
<ol>
<li><p>Map类集合K/V为null需要注意的地方：</p>
<p>| 集合类               | Key       | Value     | Super       | 说明     |<br>|:—–|:—–|:—–|:—–|:—–|<br>| Hashtable         | 不允许为 null | 不允许为 null | Dictionary  | 线程安全   |<br>| ConcurrentHashMap | 不允许为 null | 不允许为 null | AbstractMap | 分段所锁技术 |<br>| TreeMap           | 不允许为 null | 允许为 null  | AbstractMap | 线程不安全  |<br>| HashMap           | 允许为 null  | 允许为 null  | AbstractMap | 线程不安全  |</p>
<p>由于 HashMap的干扰，很多人认为 ConcurrentHashMap是可以置入 null值，注意存储null值时会抛出 NPE异常。</p>
</li>
</ol>
<ol>
<li><p>集合的有序性和稳定性：<br>ArrayList是order/unsort，HashMap是unorder/unsort，TreeSet是order/sort</p>
</li>
<li><p>利用Set唯一性去重，避免使用List的contains方法遍历去重。<br>Collection的contains()和remove()操作都是线性时间复杂度，用set也会隐式的调用contains()方法，不过你用的是HashSet,这个contains()应该只会用常数时间，所以如果考虑平均时间复杂度，用set可能会占优；最坏情况下，两者可能差不多 。</p>
</li>
</ol>
<h3 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h3><ol>
<li><p>获取单例对象，保证线程安全，以及方法的线程安全。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//立即加载（饿汉模式），在调用getInstance()方法前，实例就被创建了，getInstance()方法没有同步，所以可能出现非线程安全问题。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> INSTANCE;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//延迟加载（懒汉模式），延迟加载就是在getInstance()方法中创建实例。在多线程的环境中，延迟加载中使用同步代码块，对类加锁。虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//DCL双检查锁机制。 DCL双检查锁机制即使用volatile关键字（使变量在多个线程中可见）修改对象和synchronized代码块</span></div><div class="line"><span class="comment">//两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</span></div><div class="line"><span class="comment">//instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</span></div><div class="line"><span class="comment">//给 instance 分配内存</span></div><div class="line"><span class="comment">//调用 Singleton 的构造函数来初始化成员变量</span></div><div class="line"><span class="comment">//将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</span></div><div class="line"><span class="comment">//JVM 的即时编译器中存在指令重排序的优化，只需要将 instance 变量声明成 volatile 来避免指令重排序。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</div><div class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;    </div><div class="line">&#125;</div><div class="line"><span class="comment">//【推荐】静态内部类</span></div><div class="line"><span class="comment">//使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</span></div><div class="line"><span class="comment">//但是如果对象是序列化的就无法达到效果了。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"><span class="comment">//枚举</span></div><div class="line"><span class="comment">//枚举的缺点是它无法从另一个基类继承，因为它已经继承自java.lang.Enum。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FooEnumSingleton &#123;</div><div class="line">    INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FooEnumSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>线程资源通过线城池提供，通过ThreadPoolExecutor方式创建。</p>
<p> ThreadPoolExecutor作为java.util.concurrent包对外提供基础实现，以内部线程池的形式对外提供管理任务执行，线程调度，线程池管理等等服务</p>
<p> Executors方法提供的线程服务，都是通过参数设置来实现不同的线程池机制。</p>
<p> 关系：Executors可以认为是封装好的线城池服务，ThreadPoolExecutor更加明确线程池的运行机制。</p>
<p> <code>Executors.newCachedThreadPool();        ``//创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE，允许创建线程为Integer.MAX_VALUE,容易OOM</code></p>
<p>  <code>Executors.newSingleThreadExecutor();   ``//创建容量为1的缓冲池，请求队列为长度为Integer.MAX_VALUE,容易OOM</code>，</p>
<p>  <code>Executors.newFixedThreadPool(``int``);    ``//创建固定容量大小的缓冲池请，求队列为长度为Integer.MAX_VALUE,容易OOM</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,  </span></span></div><div class="line">                              <span class="keyword">int</span> maximumPoolSize,  </div><div class="line">                              <span class="keyword">long</span> keepAliveTime,  </div><div class="line">                              TimeUnit unit,  </div><div class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,  </div><div class="line">                              ThreadFactory threadFactory,  </div><div class="line">                              RejectedExecutionHandler handler) &#123;  </div><div class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||  </div><div class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||  </div><div class="line">            maximumPoolSize &lt; corePoolSize ||  </div><div class="line">            keepAliveTime &lt; <span class="number">0</span>)  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();  </div><div class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </div><div class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;  </div><div class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;  </div><div class="line">        <span class="keyword">this</span>.workQueue = workQueue;  </div><div class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);  </div><div class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;  </div><div class="line">        <span class="keyword">this</span>.handler = handler;  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">/*</span></div><div class="line">corePoolSize 核心线程池大小</div><div class="line">maximumPoolSize 线程池最大容量大小</div><div class="line">keepAliveTime 线程池空闲时，线程存活的时间</div><div class="line">TimeUnit 时间单位</div><div class="line">ThreadFactory 线程工厂</div><div class="line">BlockingQueue任务队列</div><div class="line">RejectedExecutionHandler 线程拒绝策略</div><div class="line">*/</div></pre></td></tr></table></figure>
<p> <img src="http://dl2.iteye.com/upload/attachment/0105/9641/92ad44092ab4388b9fb19fc4e0d832cd.jpg" alt=""></p>
</li>
</ol>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;   </div><div class="line">         ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</div><div class="line">                 <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>));</div><div class="line"> </div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</div><div class="line">             MyTask myTask = <span class="keyword">new</span> MyTask(i);</div><div class="line">             executor.execute(myTask);</div><div class="line">             System.out.println(<span class="string">"线程池中线程数目："</span>+executor.getPoolSize()+<span class="string">"，队列中等待执行的任务数目："</span>+</div><div class="line">             executor.getQueue().size()+<span class="string">"，已执行玩别的任务数目："</span>+executor.getCompletedTaskCount());</div><div class="line">         &#125;</div><div class="line">         executor.shutdown();</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskNum = num;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"正在执行task "</span>+taskNum);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().sleep(<span class="number">4000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"task "</span>+taskNum+<span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

参考文章：[深入理解Java之线程池](http://www.importnew.com/19011.html)
</code></pre><ol>
<li><p>SimpleDateFormat类线程不安全</p>
<p> 线程不安全原因：<br> SimpleDateFormat(下面简称sdf)类内部有一个Calendar对象引用,它用来储存和这个sdf相关的日期信息,例如sdf.parse(dateStr), sdf.format(date) 。<br> calendar这个共享变量的访问没有做到线程安全<br> <img src="http://static.oschina.net/uploads/space/2013/0813/033057_iid0_568818.jpg" alt=""></p>
</li>
</ol>
<pre><code>解决方法：

将SimpleDateFormat定义成局部变量：

加一把线程同步锁：synchronized(lock)；

【推荐】使用ThreadLocal: 每个线程都将拥有自己的SimpleDateFormat对象副本。

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</div><div class="line">  <span class="comment">/** 锁对象 */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lockObj = <span class="keyword">new</span> Object();</div><div class="line">  <span class="comment">/** 存放不同的日期模板格式的sdf的Map */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt; sdfMap = <span class="keyword">new</span> HashMap&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt;();</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 返回一个ThreadLocal的sdf,每个线程只会new一次sdf</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> pattern</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat <span class="title">getSdf</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</div><div class="line">    ThreadLocal&lt;SimpleDateFormat&gt; tl = sdfMap.get(pattern);</div><div class="line">    <span class="comment">// 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf</span></div><div class="line">    <span class="keyword">if</span> (tl == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">synchronized</span> (lockObj) &#123;</div><div class="line">        tl = sdfMap.get(pattern);</div><div class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map</span></div><div class="line">          System.out.println(<span class="string">"put new sdf of pattern "</span> + pattern + <span class="string">" to map"</span>);</div><div class="line">          <span class="comment">// 这里是关键,使用ThreadLocal&lt;SimpleDateFormat&gt;替代原来直接new SimpleDateFormat</span></div><div class="line">          tl = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">              System.out.println(<span class="string">"thread: "</span> + Thread.currentThread() + <span class="string">" init pattern: "</span> + pattern);</div><div class="line">              <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(pattern);</div><div class="line">            &#125;</div><div class="line">          &#125;;</div><div class="line">          sdfMap.put(pattern, tl);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tl.get();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 是用ThreadLocal&lt;SimpleDateFormat&gt;来获取SimpleDateFormat,这样每个线程只会有一个SimpleDateFormat</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> date</div><div class="line">   * <span class="doctag">@param</span> pattern</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date, String pattern)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getSdf(pattern).format(date);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String dateStr, String pattern)</span> <span class="keyword">throws</span> ParseException </span>&#123;</div><div class="line">    <span class="keyword">return</span> getSdf(pattern).parse(dateStr);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>高并发的同步调用考虑锁的性能消耗，锁的粒度尽可能小。</p>
<p> 在获得锁之前做完所有需要做的事，只把锁用在需要同步的资源上，用完之后立即释放它。减少锁持有时间。<br> 减小锁粒度：ConcurrentHashMap。<br> 锁粗化：如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。<br> 锁消除：即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。<br> 分别用不同的锁来保护同一个类中多个独立的状态变量，而不是对整个类域只使用一个锁。锁分离。ReadWriteLock。<br> 参考文章：<a href="http://www.jb51.net/article/92453.htm" target="_blank" rel="external">Java 高并发九：锁的优化和注意事项详解</a></p>
</li>
<li><p>对多个资源、库表、对象加锁，需要保持一致的加锁顺序。</p>
<p> 当多个线程需要相同的一些锁，但是按照不同的顺序加锁，死锁就很容易发生。如果能确保所有的线程都是按照相同的顺序获得锁，那么死锁就不会发生。<br> 此外还有加锁时限、死锁检测等方法预防死锁。</p>
</li>
<li><p>并发修改同一记录必须加锁。</p>
<p> 乐观锁，大多是基于数据版本(Version)记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于<a href="http://www.knowsky.com/sql.asp" target="_blank" rel="external">数据库</a>表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。<br> 提交版本必须大于记录当前版本才能执行更新。<br> 悲观锁（Pessimistic Lock），正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他<a href="http://baike.baidu.com/view/121511.htm" target="_blank" rel="external">事务</a>，以及来自外部系统的<a href="http://baike.baidu.com/subview/709594/709594.htm" target="_blank" rel="external">事务处理</a>）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的<a href="http://baike.baidu.com/subview/118455/118455.htm" target="_blank" rel="external">排他性</a>，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</p>
</li>
<li><p>多线程并行之Timer</p>
<p> 定时任务用Timer实现有可能出现异常，因为它是基于绝对时间而不是相对时间进行调度的。当环境的系统时间被修改后，原来的定时任务可能就不跑了。另外需要注意一点，捕获并处理定时任务的异常。如果在TimerTask里抛出了异常，那么Timer认为定时任务被取消并终止执行线程。</p>
</li>
<li><p>异步转同步操作CountDownLatch</p>
<p> CountDownLatch这个类能够使一个线程等待其他线程完成各自的工作后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。<br> CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。<br> <img src="http://incdn1.b0.upaiyun.com/2015/04/f65cc83b7b4664916fad5d1398a36005.png" alt=""></p>
</li>
</ol>
<pre><code>构造器中的**计数值（count）实际上就是闭锁需要等待的线程数量**。这个值只能被设置一次，而且CountDownLatch**没有提供任何机制去重新设置这个计数值**。这种通知机制是通过 **CountDownLatch.countDown()**方法来完成的；每调用一次这个方法，在构造函数中初始化的count值就减1。所以当N个线程都调 用了这个方法，count的值等于0，然后主线程就能通过await()方法，恢复执行自己的任务。
参考文章：[什么时候使用CountDownLatch](http://www.importnew.com/15731.html)
</code></pre><ol>
<li><p>多线程之Random</p>
<p> 任何情况下都不要在多个线程间共享一个<em>java.util.Random</em>实例，而该把它放入<em>ThreadLocal</em>之中。</p>
<p> Java7在<strong>所有</strong>情形下都更推荐使用<em>java.util.concurrent.ThreadLocalRandom</em>——它向下兼容已有的代码且运营成本更低。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTL_Random</span><span class="params">( <span class="keyword">final</span> <span class="keyword">int</span> threads, <span class="keyword">final</span> <span class="keyword">long</span> cnt )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch( threads );</div><div class="line">    <span class="keyword">final</span> ThreadLocal&lt;Random&gt; rnd = <span class="keyword">new</span> ThreadLocal&lt;Random&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Random <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Random( <span class="number">100</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads; ++i )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> Thread thread = <span class="keyword">new</span> Thread( <span class="keyword">new</span> RandomTask( <span class="keyword">null</span>, i, cnt, latch ) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Random <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> rnd.get();</div><div class="line">            &#125;</div><div class="line">        &#125; );</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 参考文章：<a href="http://www.importnew.com/12460.html" target="_blank" rel="external">多线程环境下生成随机数</a></p>
</li>
<li><p>volatile</p>
<ol>
<li>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li>
<li>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</li>
<li>通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</li>
<li><strong>volatile不能确保原子性</strong></li>
<li>可以通过synchronized或lock，进行加锁，来保证操作的原子性。也可以通过AtomicInteger。</li>
<li>java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</li>
<li>好的一面是它通过一个直接机器码指令设置值时，能够最小程度地影响其他线程的执行。坏的一面是如果它在与其他线程竞争设置值时失败了，它不得不再次尝试。在高竞争下，这将转化为一个自旋锁，线程不得不持续尝试设置值，无限循环直到成功。</li>
<li>JDK8中LongAdder实例，并使用intValue()和add()来获取和设置值。神奇的地方发生在幕后。这个类所做的事情是当一个直接CAS由于竞争失败时，它将delta保存在为该线程分配的一个内部单元对象中，然后当intValue()被调用时，它会将这些临时单元的值再相加到结果和中。这就减少了返回重新CAS或者阻塞其他线程的必要。</li>
<li>参考文章：<br> <a href="http://www.importnew.com/24082.html" target="_blank" rel="external">你真的了解volatile关键字吗？</a><br> <a href="http://www.importnew.com/11345.html" target="_blank" rel="external">Java 8 LongAdders：管理并发计数器的正确方式</a></li>
</ol>
</li>
<li><p>HashMap在resize可能发生死链，加锁解决。</p>
<p> 当多个线程同时检测到总数量超过门限值的时候就会同时调用resize操作，各自生成新的数组并rehash后赋给该map底层的数组table，结果最终只有最后一个线程生成的新数组被赋给table变量，其他线程的均会丢失。而且当某些线程已经完成赋值而其他线程刚开始的时候，就会用已经被赋值的table作为原始数组，这样也会有问题。<br> 首先如果多个线程同时使用put方法添加元素，而且假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。<br> 线程安全：<br>   Hashtable<br>   ConcurrentHashMap(性能优势)<br>   Synchronized Map<br> 参考文章：<a href="http://www.importnew.com/21396.html" target="_blank" rel="external">如何线程安全的使用HashMap</a></p>
</li>
<li><p>ThreadLocal</p>
<p>参考文章：<a href="http://www.cnblogs.com/xzwblog/p/7227509.html" target="_blank" rel="external">彻底理解ThreadLocal</a></p>
</li>
</ol>
<h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><ol>
<li><a href="https://yq.aliyun.com/articles/69327?spm=5176.100241.0.0.3rSWCo#" target="_blank" rel="external">【Java编码规范】《阿里巴巴Java开发手册（正式版）》更新（v1.2.0版）——迄今最完善版本</a></li>
<li><a href="http://www.jianshu.com/p/bc8fed863eca" target="_blank" rel="external">白话阿里巴巴Java开发手册(编程规约)</a></li>
<li><a href="http://www.jianshu.com/p/5b6d180bd1c2" target="_blank" rel="external">白话阿里巴巴Java开发手册（异常日志）</a></li>
<li><a href="http://www.jianshu.com/p/9528c4ea1504" target="_blank" rel="external">白话阿里巴巴Java开发手册（安全规约）</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;经验，是提高自己的重要途径之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;学习笔记：&quot;&gt;&lt;a href=&quot;#学习笔记：&quot; class=&quot;
    
    </summary>
    
      <category term="学习笔记" scheme="http://lincentma.men/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://lincentma.men/tags/java/"/>
    
      <category term="alibaba" scheme="http://lincentma.men/tags/alibaba/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合理解</title>
    <link href="http://lincentma.men/frame_ssm.html"/>
    <id>http://lincentma.men/frame_ssm.html</id>
    <published>2017-07-17T16:32:21.000Z</published>
    <updated>2017-07-17T16:34:41.340Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="SSM框架整合理解"><a href="#SSM框架整合理解" class="headerlink" title="SSM框架整合理解"></a>SSM框架整合理解</h1><blockquote>
<p>把IntelliJ IDEA+Maven+Spring + SpringMVC + MyBatis项目部署，框架流程梳理调试了一遍，加深自己的理解。</p>
</blockquote>
<h2 id="回顾SSM框架"><a href="#回顾SSM框架" class="headerlink" title="回顾SSM框架"></a>回顾SSM框架</h2><p><strong>Spring</strong><br>Spring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。<br>Spring的核心思想是IoC（控制反转），即不再需要程序员去显式地<code>new</code>一个对象，而是让Spring框架帮你来完成这一切。</p>
<p><strong>SpringMVC</strong><br>SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet承担中介或是前台这样的职责，将用户请求通过HandlerMapping去匹配Controller，Controller就是具体对应请求所执行的操作。SpringMVC相当于SSH框架中struts。</p>
<p><strong>mybatis</strong><br>mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。</p>
<h2 id="SSM框架流程"><a href="#SSM框架流程" class="headerlink" title="SSM框架流程"></a>SSM框架流程</h2><p><img src="http://images2015.cnblogs.com/blog/713721/201603/713721-20160302144740705-313885038.png" alt="SpringMVC处理流程"></p>
<h2 id="SSM框架搭建"><a href="#SSM框架搭建" class="headerlink" title="SSM框架搭建"></a>SSM框架搭建</h2><h3 id="创建Maven的Web项目"><a href="#创建Maven的Web项目" class="headerlink" title="创建Maven的Web项目"></a>创建Maven的Web项目</h3><ol>
<li>通过IntelliJ IDEA创建maven项目：<ul>
<li>选中Createfrom archetype，选择maven-archetype-webapp</li>
<li>在Properties中添加一个参数 archetypeCatalog=internal，提高maven项目构建速度</li>
</ul>
</li>
<li>SSH框架Web项目框架<ul>
<li>main：<ul>
<li>创建java文件夹：项目代码</li>
<li>resources文件夹：<ol>
<li>mapping文件夹：数据库表xml</li>
<li>xml配置文件</li>
</ol>
</li>
</ul>
</li>
<li>webapp：<ul>
<li>WEB-INF：<ul>
<li>创建jsp文件夹：不同显示页面</li>
<li>web.xml:配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Tomcat启动项目<ul>
<li>为项目配置Tomcat</li>
</ul>
</li>
</ol>
<h3 id="配置各种XML"><a href="#配置各种XML" class="headerlink" title="配置各种XML"></a>配置各种XML</h3><ol>
<li><p>pom.xml——引入项目所需要的jar包</p>
<ul>
<li>spring核心依赖</li>
<li>mybatis依赖</li>
<li>mybatis-spring整合包依赖</li>
<li>mysql驱动依赖</li>
<li>其他依赖：<ul>
<li>日志相关：log4j、slf4j</li>
<li>连接池相关：commons-dbcp、c3p0、Druid</li>
<li>Json相关：fastjson</li>
<li>其他：jstl</li>
</ul>
</li>
<li>PS：此外还有SpringBoot可以简化xml中的配置项数量。SpringBoot完全抛弃了繁琐的XML文件配置方式，而是替代性地用注解方式来实现。 <ul>
<li>参考文章：<a href="http://blog.csdn.net/u013248535/article/details/55100979" target="_blank" rel="external">IDEA下从零开始搭建SpringBoot工程</a></li>
<li>调试过程中的错误有很大一部分是所引的jar没有在pom.xml配置，这部分需要仔细细致。</li>
<li>关于jar包的版本号的修改，可以在<properties></properties>标签中用变量保存版本号，<dependencies></dependencies>中具体的jar包的版本用变量代替，方便后续修改。</li>
</ul>
</li>
</ul>
</li>
<li><p>web.xml</p>
<ul>
<li>这是整个web项目的配置文件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></div><div class="line">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</div><div class="line">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>cloudmusic_ssm_demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 编码过滤器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- spring监听器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 防止spring内存溢出监听器，比如quartz --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- spring mvc servlet--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 此处也可以配置成 *.do 形式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- session配置 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><servlet>中的配置，加载<strong>SpringMVC</strong>的配置文件。<ul>
<li>SpringMVC具有统一的入口DispatcherServlet，所有的请求都通过DispatcherServlet。DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller来处理。</li>
<li>拦截所有的请求，并加载所有的ssm配置文件（路径为classpath:spring-mvc.xml）</li>
</ul>
</servlet></li>
<li>在web.xml中使用contextConfigLocation参数定义要装入的<strong>Spring</strong>配置文件。<ul>
<li>加载路径为classpath:spring-mybatis.xml文件</li>
</ul>
</li>
<li>参考文章： <a href="http://blog.csdn.net/yijiemamin/article/details/51156189" target="_blank" rel="external">SSM:spring+springmvc+mybatis框架中的XML配置文件功能详细解释</a></li>
</ul>
</li>
<li><p>spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">                        http://www.springframework.org/schema/mvc</div><div class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动扫描  @Controller--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.demo.controller"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>/&gt;</span> <span class="comment">&lt;!-- JSON转换器 --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 文件上传配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 上传文件大小限制为31M，31*1024*1024 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"32505856"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"4096"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>controller注入：使用组件扫描方式，扫描包下面所有的Controller，可以使用注解来指定访问路径。</li>
<li>Spring 所有功能都在 Bean 的基础上演化而来，所以必须事先将 Controller 变成 Bean。配置了一个 AnnotationMethodHandlerAdapter，它负责根据 Bean 中的 Spring MVC 注解对 Bean 进行加工处理，使这些 Bean 变成控制器并映射特定的 URL 请求。</li>
<li>视图解析：在Controller中设置视图名的时候会自动加上前缀和后缀。</li>
</ul>
</li>
<li><p>spring-mybatis.xml：Spring与MyBatis的整合配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/tx</div><div class="line">                        http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.demo"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 第一种方式：加载一个properties文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 第二种方式：加载多个properties文件</span></div><div class="line">    &lt;bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"&gt;</div><div class="line">        &lt;property name="locations"&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</div><div class="line">                &lt;value&gt;classpath:common.properties&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name="fileEncoding" value="UTF-8"/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"&gt;</div><div class="line">        &lt;property name="properties" ref="configProperties"/&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></div><div class="line">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClass&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbcUrl&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ssm.demo.dao"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>自动扫描，自动注入，配置数据库<ul>
<li>自动扫描,将标注Spring注解的类自动转化Bean，同时完成Bean的注入</li>
<li>加载数据资源属性文件</li>
<li>配置数据源（三种方式，采用DBCP）</li>
<li>配置sessionfactory</li>
<li>装配Dao接口</li>
<li>声明式事务管理 </li>
<li>注解事务切面 </li>
</ul>
</li>
<li>Mapper.xml映射文件中定义了操作数据库的sql，每一个sql是一个statement，映射文件是myBatis的核心。</li>
</ul>
</li>
<li><p>jdbc.properties：JDBC属性文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbcUrl=jdbc:mysql://localhost:3306/db_ssm?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull</div><div class="line">username=root</div><div class="line">password=147789</div><div class="line"></div><div class="line">#定义初始连接数</div><div class="line">initialSize=0</div><div class="line">#定义最大连接数</div><div class="line">maxActive=20</div><div class="line">#定义最大空闲</div><div class="line">maxIdle=20</div><div class="line">#定义最小空闲</div><div class="line">minIdle=1</div><div class="line">#定义最长等待时间</div><div class="line">maxWait=60000</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="创建业务流程"><a href="#创建业务流程" class="headerlink" title="创建业务流程"></a>创建业务流程</h3><blockquote>
<p>以数据库查询表内容为例</p>
<p>持久层：DAO层（mapper）<strong>做数据持久层的工作</strong>，负责与数据库进行联络的一些任务都封装在此，</p>
<ul>
<li>DAO层的设计首先是设计DAO的接口，</li>
<li>然后在Spring的配置文件中定义此接口的实现类，</li>
<li>然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，显得结构非常清晰，</li>
<li>DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。</li>
</ul>
<p>业务层：Service层  <strong>主要负责业务模块的逻辑应用设计</strong>。</p>
<ul>
<li>首先设计接口，再设计其实现的类</li>
<li>接着再在Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。</li>
<li>Service层的业务实现，具体要调用到已定义的DAO层的接口，</li>
<li>封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性，程序显得非常简洁。</li>
</ul>
<p>表现层：Controller层（Handler层）<strong>负责具体的业务模块流程的控制</strong></p>
<ul>
<li>在此层里面要调用Service层的接口来控制业务流程，</li>
<li>控制的配置也同样是在Spring的配置文件里面进行，针对具体的业务流程，会有不同的控制器，我们具体的设计过程中可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块，这样不仅使程序结构变得清晰，也大大减少了代码量。</li>
</ul>
<p>模型层：Model层 <strong>主要存放实体类</strong></p>
</blockquote>
<p>项目代码结构：</p>
<ul>
<li><p>controller：</p>
<ul>
<li>“@RequestMapping”请求路径映射，如果标注在某个controller的类级别上，则表明访问此类路径下的方法都要加上其配置的路径；最常用是标注在方法上，表明哪个具体的方法来接受处理某次请求。</li>
<li>调用service层方法</li>
<li>spring mvc 支持如下的返回方式：ModelAndView, Model, ModelMap, Map,View, String, void。本文返回的是String，通过model进行使用。<ul>
<li>参考文章：<a href="https://my.oschina.net/zhdkn/blog/316530" target="_blank" rel="external">SpringMVC返回（return）方式详解</a></li>
</ul>
</li>
</ul>
</li>
<li><p>service：建立service接口和实现类</p>
<ul>
<li>impl:接口对应实现类：<ul>
<li>调用Dao层的数据库操作以及model层的实体类</li>
</ul>
</li>
</ul>
</li>
<li><p>dao</p>
<ul>
<li>定义接口中的方法</li>
<li><strong>一个Dao对应一个对应的mapper文件，实现Dao对应的定义的接口方法</strong></li>
</ul>
</li>
<li><p>mapping：</p>
<ul>
<li>mapper.xml：实现dao中接口定义的方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ssm.demo.dao.UserDao"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserBaseMap"</span> <span class="attr">type</span>=<span class="string">"com.ssm.demo.model.User"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_phone"</span> <span class="attr">property</span>=<span class="string">"userPhone"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_pwd"</span> <span class="attr">property</span>=<span class="string">"userPwd"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd_salt"</span> <span class="attr">property</span>=<span class="string">"pwdSalt"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modify_time"</span> <span class="attr">property</span>=<span class="string">"modifyTime"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"is_delete"</span> <span class="attr">property</span>=<span class="string">"isDelete"</span> <span class="attr">jdbcType</span>=<span class="string">"SMALLINT"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultMap</span>=<span class="string">"UserBaseMap"</span>&gt;</span></div><div class="line">        SELECT * FROM t_user</div><div class="line">        WHERE id = #&#123;userId&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByPhoneOrEmail"</span> <span class="attr">resultMap</span>=<span class="string">"UserBaseMap"</span>&gt;</span></div><div class="line">        SELECT * FROM t_user</div><div class="line">        WHERE user_email = #&#123;emailOrPhone&#125; OR user_phone = #&#123;emailOrPhone&#125;</div><div class="line">        AND user_state = #&#123;state&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserBaseMap"</span>&gt;</span></div><div class="line">        SELECT * FROM t_user</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>namespace:当前库表映射文件的命名空间，唯一的不能重复</li>
<li>映射实体类的数据类型 id：resultMap的唯一标识</li>
<li>column:库表的字段名 property:实体类里的属性名</li>
<li>id：当前sql的唯一标识  </li>
<li>parameterType：输入参数的数据类型   </li>
<li>返回值的数据类型：resultMap适合使用返回值是自定义实体类的情况 ； resultType适合使用返回值的数据类型是非自定义的，即jdk的提供的类型。</li>
<li>{}:用来接受参数的，如果是传递一个参数#{id}内容任意，如果是多个参数就有一定的规则,采用的是预编译的形式select</li>
</ul>
</li>
<li><p>model</p>
<ul>
<li>实体属性——对应表中的元组的属性</li>
<li>getter和setter方法</li>
</ul>
</li>
</ul>
<blockquote>
<p>DataBase ===&gt; Entity ===&gt; Mapper.xml ===&gt; Mapper.<a href="http://lib.csdn.net/base/java" target="_blank" rel="external">Java</a> ===&gt; Service.java ===&gt; Controller.java ===&gt; Jsp.</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/gallenzhang/article/details/51932152" target="_blank" rel="external">SSM框架整合（IntelliJ IDEA + maven + Spring + SpringMVC + MyBatis）</a></p>
<h2 id="SSM框架感受"><a href="#SSM框架感受" class="headerlink" title="SSM框架感受"></a>SSM框架感受</h2><blockquote>
<p>本质上的MVC，xml配置、注解，以及mapper的映射，让开发更加简洁和思路清晰</p>
</blockquote>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;SSM框架整合理解&quot;&gt;&lt;a href=&quot;#SSM框架整合理解&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合理解&quot;&gt;&lt;/a&gt;SSM框架整合理解
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SSM" scheme="http://lincentma.men/tags/SSM/"/>
    
      <category term="SpringMVC" scheme="http://lincentma.men/tags/SpringMVC/"/>
    
      <category term="Spring" scheme="http://lincentma.men/tags/Spring/"/>
    
      <category term="Mybatis" scheme="http://lincentma.men/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>【面试持续更新】2018校招记录</title>
    <link href="http://lincentma.men/interview_record.html"/>
    <id>http://lincentma.men/interview_record.html</id>
    <published>2017-07-14T16:10:57.000Z</published>
    <updated>2017-07-14T16:12:30.847Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="【面试持续更新】2018校招记录"><a href="#【面试持续更新】2018校招记录" class="headerlink" title="【面试持续更新】2018校招记录"></a>【面试持续更新】2018校招记录</h1><h1 id="工商银行"><a href="#工商银行" class="headerlink" title="工商银行"></a>工商银行</h1><p>一句话，谈人生谈理想，不谈技术</p>
<h1 id="中兴提前批"><a href="#中兴提前批" class="headerlink" title="中兴提前批"></a>中兴提前批</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><ol>
<li>简单自我介绍</li>
<li>实习经历详细介绍</li>
<li>前端请求与后端处理的异常情况如何处理</li>
<li>SQL模糊查询语句，如何提高查询效率</li>
<li>实习所用PHP框架是如何与数据库相连接的</li>
<li>常用Shell命令</li>
<li>Git开发流程</li>
</ol>
<h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><ol>
<li>再次自我介绍</li>
<li>工作地点意向询问</li>
<li>网络请求如何加速（不理解是询问那一方面的加速，自己回答分机房说不对）</li>
<li>实习相关问题</li>
<li>然后就陷入了尴尬的安静</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;【面试持续更新】2018校招记录&quot;&gt;&lt;a href=&quot;#【面试持续更新】2018校招记录&quot; class=&quot;headerlink&quot; title=&quot;【面试持续更新】20
    
    </summary>
    
      <category term="面试" scheme="http://lincentma.men/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="interview" scheme="http://lincentma.men/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>自己用过的框架</title>
    <link href="http://lincentma.men/used_frames.html"/>
    <id>http://lincentma.men/used_frames.html</id>
    <published>2017-07-14T15:46:16.000Z</published>
    <updated>2017-07-14T15:48:14.875Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="自己用过的框架"><a href="#自己用过的框架" class="headerlink" title="自己用过的框架"></a>自己用过的框架</h1><h2 id="Java之SSH"><a href="#Java之SSH" class="headerlink" title="Java之SSH"></a>Java之SSH</h2><blockquote>
<p>SSH不是一个框架，而是多个框架的集成，是目前较流行的一种Web应用程序开源集成框架，用于构建灵活、易于扩展的多层Web应用程序。</p>
<p>系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层。</p>
</blockquote>
<h3 id="Spring-Struts-Hibernate（SSH）"><a href="#Spring-Struts-Hibernate（SSH）" class="headerlink" title="Spring+Struts+Hibernate（SSH）"></a>Spring+Struts+Hibernate（SSH）</h3><blockquote>
<p>其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，利用hibernate框架对持久层提供支持，业务层用spring支持。</p>
<p>系统的基本业务流程是：</p>
<p>在表示层中，首先通过JSP页面实现交互界面，负责传送请求(Request)和接收响应(Response)，然后Struts根据配置文件(struts-config.xml)将ActionServlet接收到的Request委派给相应的Action处理。</p>
<p>在业务层中，管理服务组件的 Spring IoC容器负责向Action提供业务模型(Model)组件和该组件的协作对象数据处理(DAO)组件完成业务逻辑，并提供事务处理、缓冲池等容器组件以提升系统性能和保证数据的完整性。</p>
<p>在持久层中，则依赖于Hibernate的对象化映射和数据库交互，处理DAO组件请求的数据，并返回处理结果。</p>
</blockquote>
<p>SSH配置流程：</p>
<ol>
<li>创建web项目</li>
<li>配置struts：<ul>
<li>添加Struts2所需要的基本jar包到 lib目录</li>
<li>在web.xml 文件里添加struts的过滤器配置</li>
<li>在src目录下创建struts配置文件struts.xml</li>
</ul>
</li>
<li>配置spring：<ul>
<li>在lib目录下导入spring相关的jar包（2个spring跟struts结合的jar包）</li>
<li>在web.xml文件下配置监听器</li>
</ul>
</li>
<li>配置hibernate:<ul>
<li>在lib目录里导入hibernate相关的jar包</li>
<li>创建实体类</li>
<li>创建实体类对应的xxx..hbm.xml映射文件</li>
<li><strong>应用IOC实现DAO接口</strong></li>
</ul>
</li>
<li><strong>编写Action类</strong></li>
<li><strong>编写Service(接口类)和ServiceImpl(实现类)</strong></li>
</ol>
<p>Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p>
<p>Struts它通过采用 Java Servlet/JSP 技术，实现了基于JavaEE Web应用的MVC设计模式的应用框架，是MVC经典设计模式中的一个经典产品。</p>
<p>Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品。</p>
<p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 </p>
<h3 id="Spring-SpringMVC-Mybatis（SSM）"><a href="#Spring-SpringMVC-Mybatis（SSM）" class="headerlink" title="Spring+SpringMVC+Mybatis（SSM）"></a>Spring+SpringMVC+Mybatis（SSM）</h3><blockquote>
<p> SpringMVC 做控制器(controller)，Spring 管理各层的组件，MyBatis 负责持久化层。</p>
</blockquote>
<p>Struts2与SpringMVC</p>
<p><img src="http://p3.pstatp.com/large/f740001068a5c16f544" alt="avatar"></p>
<p><img src="http://p1.pstatp.com/large/f7500089dc67ac93a17" alt="avatar"></p>
<p>MyBatis与Hibernate</p>
<ul>
<li>MyBatis可以进行更为细致的SQL优化，可以减少查询字段。</li>
<li>MyBatis容易掌握，而Hibernate门槛较高。</li>
<li>Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。</li>
<li>Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。</li>
<li>Hibernate<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="external">数据库</a>移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。</li>
<li>Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳，更新操作不能指定刷新指定记录，会清空整个表，但是也可以使用第三方缓存。</li>
<li>Hibernate 封装性好，屏蔽了数据库差异，自动生成SQL语句，应对数据库变化能力较弱，SQL语句优化困难。</li>
<li>MyBatis仅实现了SQL语句和对象的映射，需要针对具体的数据库写SQL语句，应对数据库变化能力较强，SQL语句优化较为方便。</li>
</ul>
<p>SSM配置流程：</p>
<ol>
<li>创建web项目</li>
<li>在WEB-INF/lib导入jar包（亦可以根目录下用maven配置文件poom.xml进行配置管理jar包）</li>
<li>配置MyBatis:dao层编写dao类以及对应的mapper和xml（为dao接口方法提供sql语句配置）</li>
<li>配置spring：在applicationContext.xml.xml文件下配置</li>
<li>配置springmvc：配置springMVC.xml</li>
<li>编写Service以及ServiceImpl</li>
<li>编写Controller（相当于struts中的action）</li>
</ol>
<blockquote>
<p>SSM和SSH不同主要在MVC实现方式，以及ORM持久化方面不同（Hiibernate与Mybatis）。SSM越来越轻量级配置，将注解开发发挥到极致，且ORM实现更加灵活，SQL优化更简便；而SSH较注重配置开发，其中的Hiibernate对JDBC的完整封装更面向对象，对增删改查的数据维护更自动化，但SQL优化方面较弱，且入门门槛稍高。</p>
</blockquote>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="http://blog.csdn.net/zyb507/article/details/8122649" target="_blank" rel="external">SSH框架的底层机制及原理</a></li>
<li><a href="http://www.cnblogs.com/zhaowancheng/p/5841591.html" target="_blank" rel="external">SSH的框架整合</a></li>
<li><a href="http://blog.csdn.net/shan9liang/article/details/8803989" target="_blank" rel="external">SSH框架总结（框架分析+环境搭建+实例源码下载）</a></li>
<li><a href="http://blog.csdn.net/peak_and_valley/article/details/52925032" target="_blank" rel="external">SSH和SSM对比总结</a></li>
<li><a href="http://www.2cto.com/kf/201606/518341.html" target="_blank" rel="external">手把手教你整合最优雅SSM框架：SpringMVC + Spring + MyBatis</a></li>
<li><a href="http://how2j.cn/k/ssm/ssm-tutorial/1137.html?tid=77#nowhere" target="_blank" rel="external">SSM SPRING+SPING MVC + MYBATIS 三大框架整合详细步骤</a></li>
</ol>
<h2 id="PHP之ODP"><a href="#PHP之ODP" class="headerlink" title="PHP之ODP"></a>PHP之ODP</h2><blockquote>
<p><strong>ODP</strong>是公司发布的在线业务开发平台，面向全百度的在线业务支撑平台，专注于总结大社区类业务模式，其提供了标准的webserver环境、标准php环境、AP框架、SAF社区业务框架、基础库、RAL资源访问层、KSARCH通用服务等组件，统一业务的逻辑和部署结构，为测试、运维等提供一致的视图。</p>
<p>这也是自己实习时候一直在用的框架。</p>
</blockquote>
<p><strong><em>Online Develop Platform = Linux+Lightted/nginx+mysql+PHP</em></strong></p>
<p>ODP核心包含了ODP的核心功能组件，包括运行环境、核心基础库、数据交互层、框架等。</p>
<p>横向看，ODP核心通过库、框架、工具等集成支持了各类规范和模式，也为全流程支持提供接口。</p>
<p>向上看，ODP核心直接为产品线业务提供运行环境和研发支持。</p>
<p>向下看，ODP核心通过数据交互层将底层的通用服务提供给业务。</p>
<p>AP框架目录：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">模板层： odp/template/appname/</div><div class="line"></div><div class="line">Actiono: odp/app/appname/actions/</div><div class="line"></div><div class="line">PageService: odp/app/appname/models/service/page/</div><div class="line"></div><div class="line">DataService: odp/app/appname/models/service/data/</div><div class="line"></div><div class="line">Dao: odp/app/appname/models/dao/</div><div class="line"></div><div class="line">Controller:  odp/app/appname/controller/</div></pre></td></tr></table></figure>
<p>ODP应用程序结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">newapp          // 应用名称</div><div class="line">+--action       // 动作类目录</div><div class="line">|  +--api       // 子系统交互api目录</div><div class="line">|  |  --Sample.php  // 示例api服务端action</div><div class="line">|  --Sample.php // 示例普通action</div><div class="line">+--api          // saf api接口和服务类</div><div class="line">|  --Interface.php  // 接口类</div><div class="line">|  --Service.php    // 实现类</div><div class="line">+--conf         // 配置目录</div><div class="line">|  +--newapp        // 配置目录，配置文件可以拆分</div><div class="line">|     --global.conf // app全局配置文件</div><div class="line">|     --log.conf    // log示例配置文件</div><div class="line">+--controllers      // 控制类目录</div><div class="line">|  --Main.php       // 主控制类</div><div class="line">|  --Api.php        // api控制类</div><div class="line">+--doc          // 文档目录</div><div class="line">+--library      // 本地类根目录</div><div class="line">|  +--newapp        // app本地类目录</div><div class="line">|     --Util.php    // 示例本地类</div><div class="line">+--models       // 数据目录</div><div class="line">|  +--dao       // 数据获取目录</div><div class="line">|  |  --Sample.php  // 示例</div><div class="line">|  +--service       // 页面数据服务目录</div><div class="line">|     +--data       // 主题数据服务目录</div><div class="line">|     |  --Sample.php   // 示例</div><div class="line">|     +--page       // 页面数据服务目录</div><div class="line">|        --Sample.php   // 示例</div><div class="line">|        --SampleApi.php // api示例</div><div class="line">+--script       // 脚本目录</div><div class="line">|  --sampleScript.php   // 示例脚本</div><div class="line">+--test         // 测试目录</div><div class="line">+--Bootstrap.php    // ap框架的引导文件</div><div class="line">+--build.sh     // 打包脚本</div><div class="line">+--index.php        // 入口文件</div><div class="line">+--Makefile     // 自动部署脚本</div><div class="line">--readme.txt        // readme文件，告诉你如何部署和运行</div></pre></td></tr></table></figure>
<p>DB，通过对应参数的不同，实现自动拼接不同的SQL语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$tables 数据表列表，可以是数组或者字符串</div><div class="line">$fields 字段列表，可以是数组或者字符串</div><div class="line">$conds 条件列表，可以是数组或者字符串</div><div class="line">$options 选项列表，可以是数组或者字符串</div><div class="line">$appends 结尾操作列表，可以是数组或者字符串</div><div class="line"></div><div class="line">例如：</div><div class="line">$table = ‘student’;</div><div class="line">$fields = array(‘number’, ‘class’);</div><div class="line">$conds = array(‘grade =‘ =&gt;‘three’, ‘school =‘ =&gt; ‘希望小学’);</div><div class="line">调用select($table, $fields, $conds); </div><div class="line">就会生成 </div><div class="line">select number, class from student where grade = ‘three’ and school = ‘希望小学’   </div><div class="line">的sql语句并执行之。</div></pre></td></tr></table></figure>
<p>逻辑分层之间的调用关系，只能向后依赖，不能向前依赖或者跨层之间依赖。此次逻辑分层从前到后，依次为：Action、PageService、DataService、Dao。具体来说便是指，Dao不能依赖于DataService,PageService,Action；DataService不能依赖于PageService和Action；PageService不能依赖于Action。Action不能直接调用DataService，也不能直接调用Dao；PageService不能直接调用Dao。</p>
<p>SAF是<strong>ODP</strong>环境提供的业务层框架，SAF框架建立的目的是为了把业务逻辑开发过程中一些共性的问题抽取出来，并提供统一的解决方案。SAF框架包含控制器组件，通用业务组件（参数处理，session处理，日志打印等）以及通用配置组件。可以将SAF框架理解为一个工具库，SAF为我们提供了很多的通用功能例如验证用户的登录信息，接收用户提交的数据，更改用户的信息，记录用户的操作行为等。</p>
<p>SAF框架提供了一个很重要的功能就是钩子（Hook）机制，通过在钩子函数中覆写对应的钩子函数,可以实现对cgi(GET POST等)数据的特殊处理，对登陆信息的校验/修改以及对输出到log日志文件的内容的修改等功能。</p>
<p>RAL是一个支持多种交互协议和打包格式的php扩展。RAL规定了一套高度抽象的交互过程规范，将整个后端交互过程分成了交互协议和数据打包/解包两大块，可以支持一些常用的后端交互协议，标准化协议扩充的开发过程，促进代码复用。RAL集成了负载均衡、健康检查等功能，让上游端不需要再关注这些繁琐的通用逻辑，同时实现版本可以在性能方面有更优的表现。</p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ol>
<li><a href="https://www.baidu.com/link?url=Ji5p7uSBrfaDJmm7pyKUWuagxe46iOW-3L7yJqIJIEgxG2PIbYtP8UcmVkjkAeNUqiGw473M1C2O56GpY6ifba&amp;wd=&amp;eqid=c406ef2100009259000000035968caf8" target="_blank" rel="external">ODP教程 | 百度外卖手册</a></li>
</ol>
<h2 id="Python之Tornado"><a href="#Python之Tornado" class="headerlink" title="Python之Tornado"></a>Python之Tornado</h2><blockquote>
<p>自己做Sug平台展示时候选择的Python Web框架</p>
</blockquote>
<p>Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其 非阻塞的方式和对 <a href="http://www.kernel.org/doc/man-pages/online/pages/man4/epoll.4.html" target="_blank" rel="external">epoll</a> 的运用，Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。我们开发这个 Web 服务器的主要目的就是为了处理 FriendFeed 的实时功能 ——在 FriendFeed 的应用里每一个活动用户都会保持着一个服务器连接。</p>
<h3 id="参考文章：-1"><a href="#参考文章：-1" class="headerlink" title="参考文章："></a>参考文章：</h3><ol>
<li><a href="http://www.tornadoweb.cn/documentation" target="_blank" rel="external">Tornado</a></li>
</ol>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><blockquote>
<p>无论做什么框架，很多时候都离不开nginx</p>
</blockquote>
<p>NGINX 有一个主进程（它执行特权操作，如读取配置和绑定端口）和一些工作进程与辅助进程。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理应该是Nginx做的最多的一件事了。反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;  </div><div class="line">        listen       80;                                                         </div><div class="line">        server_name  localhost;                                               </div><div class="line">        client_max_body_size 1024M;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http://localhost:8080;</div><div class="line">            proxy_set_header Host $host:$server_port;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行从而共同完成工作任务。简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</p>
<h4 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">upstream test &#123;</div><div class="line">    server localhost:8080;</div><div class="line">    server localhost:8081;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen       81;                                                         </div><div class="line">    server_name  localhost;                                               </div><div class="line">    client_max_body_size 1024M;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://test;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h4><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">upstream test &#123;</div><div class="line">    server localhost:8080 weight=9;</div><div class="line">    server localhost:8081 weight=1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p><em>ip</em>hash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">upstream test &#123;</div><div class="line">    ip_hash;</div><div class="line">    server localhost:8080;</div><div class="line">    server localhost:8081;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123; </div><div class="line">    fair; </div><div class="line">    server localhost:8080;</div><div class="line">    server localhost:8081;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h4><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123; </div><div class="line">    hash $request_uri; </div><div class="line">    hash_method crc32; </div><div class="line">    server localhost:8080;</div><div class="line">    server localhost:8081;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">upstream test&#123;  </div><div class="line">       server localhost:8080;  </div><div class="line">       server localhost:8081;  </div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    server &#123;  </div><div class="line">        listen       80;  </div><div class="line">        server_name  localhost;  </div><div class="line"></div><div class="line">        location / &#123;  </div><div class="line">            root   e:wwwroot;  </div><div class="line">            index  index.html;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        # 所有静态请求都由nginx处理，存放目录为html  </div><div class="line">        location ~ .(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;  </div><div class="line">            root    e:wwwroot;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        # 所有动态请求都转发给tomcat处理  </div><div class="line">        location ~ .(jsp|do)$ &#123;  </div><div class="line">            proxy_pass  http://test;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        error_page   500 502 503 504  /50x.html;  </div><div class="line">        location = /50x.html &#123;  </div><div class="line">            root   e:wwwroot;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="参考文章：-2"><a href="#参考文章：-2" class="headerlink" title="参考文章："></a>参考文章：</h3><ol>
<li><a href="http://blog.jobbole.com/110400/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts" target="_blank" rel="external">全面了解 Nginx 主要应用场景</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;自己用过的框架&quot;&gt;&lt;a href=&quot;#自己用过的框架&quot; class=&quot;headerlink&quot; title=&quot;自己用过的框架&quot;&gt;&lt;/a&gt;自己用过的框架&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="frame" scheme="http://lincentma.men/tags/frame/"/>
    
  </entry>
  
  <entry>
    <title>尘封已久的新浪微博实习面试问题</title>
    <link href="http://lincentma.men/merge_file_by_multi_threads.html"/>
    <id>http://lincentma.men/merge_file_by_multi_threads.html</id>
    <published>2017-07-05T15:57:49.000Z</published>
    <updated>2017-07-05T16:48:31.318Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="尘封已久的新浪微博实习面试问题"><a href="#尘封已久的新浪微博实习面试问题" class="headerlink" title="尘封已久的新浪微博实习面试问题"></a>尘封已久的新浪微博实习面试问题</h1><blockquote>
<p>假设本地磁盘目录中有若干文本文件（每行存储一个字符串），要求实现一个多线程的应用程序，将这些文本文件合并为一个文件文件。</p>
<p>备注：编程语言为必须Java，考虑代码注释、日志打印及异常处理，可以忽略内存限制。</p>
<p>请将代码以PDF附件的形式回复，谢谢。</p>
</blockquote>
<h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><ul>
<li>最简单的想法，一个线程读一个线程写</li>
<li>其次的想法，多个线程读同一个文件，一个线程写（单线程消费, 这样就严格保证了顺序）</li>
<li>多线程分组读取，是否要考虑文件的顺序？如果考虑顺序该如何？</li>
<li>线程池、生产者消费者模型</li>
<li>NIO</li>
<li>预先对目录中的文件进行分类；线程间通信，全局变量判断文件读取状态，避免重复读取</li>
<li>同步锁、队列</li>
<li>注释、日志、异常处理</li>
</ul>
<h2 id="思路参考"><a href="#思路参考" class="headerlink" title="思路参考"></a>思路参考</h2><ul>
<li><a href="http://blog.csdn.net/xiaoyangsavvy/article/details/72236603" target="_blank" rel="external">java多线程读取多个文件 导入数据库</a></li>
</ul>
<blockquote>
<p>对于处理<a href="http://lib.csdn.net/base/hadoop" target="_blank" rel="external">大数据</a>量的记录，并将处理结果写入文件中的处理方案：<br>方案一(适合于处理和输出的数据量都很大的情况)：<br>生产者：多个线程 读取一定量的数据并处理，然后将处理结果封装成一个队列元素，装进阻塞队列中<br>消费者: 一个线程 取元素 追加写文件(csv) (多个线程写文件是不安全的)</p>
<p>方案二(目前在使用的，适用于需要处理的数据量大，但输出的数据量不大的情况)：<br>生产者：一个线程，分页查询部分数据，将其封装成队列元素装进队列中<br>消费者：多个线程 ，从队列中取出数据元素并处理，存储处理结果。<br>生产者和消费者执行完毕后，再集中将消费者处理的结果一个个输出到相应文件中</p>
</blockquote>
<ul>
<li><a href="http://zx-code.iteye.com/blog/2267434" target="_blank" rel="external">java 使用线程池处理文件夹下面的文件</a></li>
</ul>
<blockquote>
<p>由于LinkedBlockingQueue实现是线程安全的，实现了先进先出等特性，是作为生产者消费者的首选。</p>
<p>LinkedBlockingQueue 可以指定容量，不指定的话，默认最大是Integer.MAX_VALUE，其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在队列空的时候会阻塞，  直到有队列成员被放进来。 </p>
</blockquote>
<ul>
<li><a href="http://blog.csdn.net/chen_yao_kerr/article/details/70675135" target="_blank" rel="external">java多线程批量读取文件(一)</a></li>
</ul>
<ul>
<li><a href="http://blog.csdn.net/a497006686/article/details/52404081" target="_blank" rel="external">新浪面试题-多线程合并文件</a></li>
<li><a href="http://blog.csdn.net/10km/article/details/51822932" target="_blank" rel="external">java:NIO读写文件的示例</a></li>
<li><a href="http://blog.csdn.net/tiantiandjava/article/details/46311929" target="_blank" rel="external">IntelliJ IDEA 之 jdk Language level</a></li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="代码感悟"><a href="#代码感悟" class="headerlink" title="代码感悟"></a>代码感悟</h2><blockquote>
<p>看了那么多资料，最后还是最简单的最好理解，一个线程读取然后再写，感觉向一个伪多线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sinatest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</div><div class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">fileWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> File inputFile;</div><div class="line">    <span class="keyword">private</span> String outputFile;</div><div class="line"></div><div class="line">    <span class="comment">//构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">fileWorker</span><span class="params">(File inputFile, String outputFile)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.inputFile = inputFile;</div><div class="line">        <span class="keyword">this</span>.outputFile = outputFile;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        File output = <span class="keyword">new</span> File(outputFile);</div><div class="line">        <span class="keyword">if</span> (!output.exists()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                output.createNewFile();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        FileInputStream fin = <span class="keyword">null</span>;</div><div class="line">        FileOutputStream fout = <span class="keyword">null</span>;</div><div class="line">        FileChannel fic = <span class="keyword">null</span>;</div><div class="line">        FileChannel foc = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fin = <span class="keyword">new</span> FileInputStream(inputFile);</div><div class="line">            fout = <span class="keyword">new</span> FileOutputStream(output, <span class="keyword">true</span>);</div><div class="line">            <span class="comment">// 从FileInputStream创建用于输入的FileChannel</span></div><div class="line">            fic = fin.getChannel();</div><div class="line">            <span class="comment">// 从FileOutputStream 创建用于输出的FileChannel</span></div><div class="line">            foc = fout.getChannel();</div><div class="line">            <span class="comment">// 16KB缓冲区</span></div><div class="line">            ByteBuffer bb = ByteBuffer.allocate(<span class="number">1024</span> &lt;&lt; <span class="number">4</span>);</div><div class="line">            <span class="comment">// 根据 read返回实际读出的字节数 中止循环</span></div><div class="line">            <span class="keyword">while</span> (fic.read(bb) &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 缓冲区翻转用于输出到foc</span></div><div class="line">                bb.flip();</div><div class="line">                foc.write(bb);</div><div class="line">                <span class="comment">// 清空缓冲区用于下次读取</span></div><div class="line">                bb.clear();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 安全释放资源</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fic)</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fic.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != foc)</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    foc.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fin)</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fin.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fout)</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fout.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="comment">//线程池线程数量</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_POOL_SIZE = <span class="number">5</span>;</div><div class="line">    <span class="comment">//遍历文件夹</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; filePathsList = <span class="keyword">new</span> ArrayList&lt;File&gt;();</div><div class="line">    <span class="comment">//缓存队列</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue BLOCKING_QUEUE = <span class="keyword">new</span> LinkedBlockingQueue();</div><div class="line">    <span class="comment">//1、遍历文件夹</span></div><div class="line">    <span class="comment">//2、线程池读取</span></div><div class="line">    <span class="comment">//3、线程写入</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//读取文件类型</span></div><div class="line">        String fileSuffix = <span class="string">".txt"</span>;</div><div class="line">        <span class="comment">//读取文件目录</span></div><div class="line">        String fileFolder = <span class="string">"D://Project//Java//MergeFile//datatest"</span>;</div><div class="line">        <span class="comment">//合并文件夹路径</span></div><div class="line">        String outputFilePath = <span class="string">"D://Project//Java//MergeFile//output.txt"</span>;</div><div class="line">        <span class="comment">//遍历文件夹</span></div><div class="line">        getFileList(fileFolder, fileSuffix);</div><div class="line">        <span class="comment">//创建线程池</span></div><div class="line">        ExecutorService es = Executors.newFixedThreadPool(THREAD_POOL_SIZE);</div><div class="line">        <span class="comment">//每一个线程读取一个文件</span></div><div class="line">        <span class="keyword">for</span> (File filePath : filePathsList) &#123;</div><div class="line">            es.execute(<span class="keyword">new</span> fileWorker(filePath, outputFilePath));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFileList</span><span class="params">(String fileFolder, String fileSuffix)</span> </span>&#123;</div><div class="line">        File f = <span class="keyword">new</span> File(fileFolder);</div><div class="line">        File[] filePaths = f.listFiles();</div><div class="line">        <span class="keyword">for</span> (File s : filePaths) &#123;</div><div class="line">            <span class="keyword">if</span> (s.isDirectory()) &#123;</div><div class="line">                getFileList(s.toString(), fileSuffix);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (-<span class="number">1</span> != s.getName().lastIndexOf(fileSuffix)) &#123;</div><div class="line">                    filePathsList.add(s);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>[ ] 解决写入顺序问题</li>
<li>[ ] 采用生产者消费者模式实现，究竟是多线程读取一个文件，还是多线程读取多个文件，还是多线程写一个文件，哪一个在实际生产环境中是最合适的</li>
<li>[ ] 日志记录以及异常处理</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;尘封已久的新浪微博实习面试问题&quot;&gt;&lt;a href=&quot;#尘封已久的新浪微博实习面试问题&quot; class=&quot;headerlink&quot; title=&quot;尘封已久的新浪微博实习面
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://lincentma.men/tags/java/"/>
    
      <category term="multi-thread" scheme="http://lincentma.men/tags/multi-thread/"/>
    
  </entry>
  
  <entry>
    <title>Python命令行查询成都铁路局12306检票口信息</title>
    <link href="http://lincentma.men/find_train_check_in.html"/>
    <id>http://lincentma.men/find_train_check_in.html</id>
    <published>2017-07-04T13:16:33.000Z</published>
    <updated>2017-07-04T13:29:35.339Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>Github地址：</p>
<p>[Find-Train-Ticket-Check-in]: <a href="https://github.com/lingma1993/Find-Train-Ticket-Check-in" target="_blank" rel="external">https://github.com/lingma1993/Find-Train-Ticket-Check-in</a></p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近日多地大雨导致铁路多趟列车停运，自己关注成都铁路12306微信公众号，发现一个新的侯乘信息查询功能。</p>
<p>该功能提供了动车和高铁的列车检票口的信息，正好圆了自己的之前挖的坑。</p>
<h2 id="如何获取接口"><a href="#如何获取接口" class="headerlink" title="如何获取接口"></a>如何获取接口</h2><p>链接地址：</p>
<p>chrome F12 点击查询在Network中找到相关接口的信息</p>
<p><a href="http://www.cd-rail.com:9090/CTKF/GeneralProServlet?code=C50101&amp;login=[&quot;10.192.111.79&quot;,&quot;hhs&quot;,&quot;hhs&quot;]&amp;sql=[&quot;20170703&quot;,&quot;ICW&quot;]&amp;where=[]&amp;order=[" target="_blank" rel="external">http://www.cd-rail.com:9090/CTKF/GeneralProServlet?code=C50101&amp;login=[&quot;10.192.111.79&quot;,&quot;hhs&quot;,&quot;hhs&quot;]&amp;sql=[&quot;20170703&quot;,&quot;ICW&quot;]&amp;where=[]&amp;order=[</a>]</p>
<p>通过<em><a href="">Postman</a></em>模拟数据请求获取数据获取信息请求的格式</p>
<h2 id="接口参数"><a href="#接口参数" class="headerlink" title="接口参数"></a>接口参数</h2><ol>
<li>车站查询</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">参数含义</th>
<th style="text-align:left">参数示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">code</td>
<td style="text-align:left"></td>
<td style="text-align:left">C50101</td>
</tr>
<tr>
<td style="text-align:left">login</td>
<td style="text-align:left">登陆信息</td>
<td style="text-align:left">[“10.192.111.79”,”hhs”,”hhs”]</td>
</tr>
<tr>
<td style="text-align:left">sql</td>
<td style="text-align:left">查询语句</td>
<td style="text-align:left">[“20170703”,”ICW”]</td>
</tr>
<tr>
<td style="text-align:left">where</td>
<td style="text-align:left"></td>
<td style="text-align:left">[]</td>
</tr>
<tr>
<td style="text-align:left">order</td>
<td style="text-align:left"></td>
<td style="text-align:left">[]</td>
</tr>
</tbody>
</table>
<ol>
<li>车次查询</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">参数含义</th>
<th style="text-align:left">参数示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">code</td>
<td style="text-align:left"></td>
<td style="text-align:left">C5010</td>
</tr>
<tr>
<td style="text-align:left">login</td>
<td style="text-align:left">登陆信息</td>
<td style="text-align:left">[“10.192.111.79”,”hhs”,”hhs”]</td>
</tr>
<tr>
<td style="text-align:left">sql</td>
<td style="text-align:left">查询语句</td>
<td style="text-align:left">[“20170703”,”8503”,”ICW”]</td>
</tr>
<tr>
<td style="text-align:left">where</td>
<td style="text-align:left"></td>
<td style="text-align:left">[]</td>
</tr>
<tr>
<td style="text-align:left">order</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<ol>
<li>车站名称查询</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">参数含义</th>
<th style="text-align:left">参数示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">code</td>
<td style="text-align:left"></td>
<td style="text-align:left">C50102</td>
</tr>
<tr>
<td style="text-align:left">login</td>
<td style="text-align:left">登陆信息</td>
<td style="text-align:left">[“10.192.111.79”,”hhs”,”hhs”]</td>
</tr>
<tr>
<td style="text-align:left">sql</td>
<td style="text-align:left">查询语句</td>
<td style="text-align:left">[]</td>
</tr>
<tr>
<td style="text-align:left">where</td>
<td style="text-align:left"></td>
<td style="text-align:left">[]</td>
</tr>
<tr>
<td style="text-align:left">order</td>
<td style="text-align:left"></td>
<td style="text-align:left">[]</td>
</tr>
</tbody>
</table>
<h2 id="解析接口返回结果"><a href="#解析接口返回结果" class="headerlink" title="解析接口返回结果"></a>解析接口返回结果</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="attr">"CHECK_STATUS"</span>:<span class="string">"停止检票"</span>,<span class="attr">"CHECK_TICKET"</span>:<span class="string">"A10、A11"</span>,<span class="attr">"END_CHECK_TIME"</span>:<span class="string">"2017/07/04 09:30:00"</span>,<span class="attr">"END_STN"</span>:<span class="string">"重庆北"</span>,<span class="attr">"END_STN_CODE"</span>:<span class="string">"CUW"</span>,<span class="attr">"IN_DATE"</span>:<span class="string">"2017/07/04 18:59:52"</span>,<span class="attr">"START_CHECK_TIME"</span>:<span class="string">"2017/07/04 09:14:00"</span>,<span class="attr">"START_STN"</span>:<span class="string">"成都东"</span>,<span class="attr">"START_STN_CODE"</span>:<span class="string">"ICW"</span>,<span class="attr">"STATUS_TRAIN"</span>:<span class="string">"正点"</span>,<span class="attr">"STN_CODE"</span>:<span class="string">"ICW"</span>,<span class="attr">"TD_DATE_ARR"</span>:<span class="string">"00:00:00"</span>,<span class="attr">"TD_DATE_DEP11"</span>:<span class="string">"09:33"</span>,<span class="attr">"TRAIN_DEP"</span>:<span class="string">"G8503"</span>,<span class="attr">"WAIT_ROOM"</span>:<span class="string">"2层候车区"</span>,<span class="attr">"WGQBZ"</span>:<span class="string">"0"</span>&#125;]</div></pre></td></tr></table></figure>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ol>
<li>urlib、urlib2<ul>
<li>构建Header，模拟Post请求</li>
</ul>
</li>
<li>prettytable<ul>
<li>处理返回数据格式化为表格</li>
</ul>
</li>
<li>re<ul>
<li>匹配站点名称以及检索结果</li>
</ul>
</li>
</ol>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="http://orj5hqpmw.bkt.clouddn.com/find_train_check_in.png" alt="TIM截图20170704212154"></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;Github地址：&lt;/p&gt;
&lt;p&gt;[Find-Train-Ticket-Check-in]: &lt;a href=&quot;https://github.com
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://lincentma.men/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>记如何折腾让博客加HTTPS</title>
    <link href="http://lincentma.men/hexo_https.html"/>
    <id>http://lincentma.men/hexo_https.html</id>
    <published>2017-06-27T16:09:54.000Z</published>
    <updated>2017-06-27T16:58:24.162Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="记如何折腾让博客加HTTPS"><a href="#记如何折腾让博客加HTTPS" class="headerlink" title="记如何折腾让博客加HTTPS"></a>记如何折腾让博客加HTTPS</h1><blockquote>
<p>折腾了一晚上的博客的HTTPS问题，最后才明白一个道理，世上没有免费的午餐，如果有，那么也是你用最宝贵的时间或是其他换来的。</p>
<p>最终折腾完一圈，回到原点的时候，明白了需求分析而不是说走就走的重要。</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="1-Google-抓取重定向301"><a href="#1-Google-抓取重定向301" class="headerlink" title="1 - Google 抓取重定向301"></a>1 - Google 抓取重定向301</h3><p>在Google搜索site:lincentma.men，查找自己的网站是否被Google收录。</p>
<p>自己的在Google Search Console 中，自己添加了sitemap之后，尝试抓取网站页面，显示：</p>
<table>
<thead>
<tr>
<th><a href="http://lincentma.men/">http://lincentma.men/</a></th>
<th>请求编入索引</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>Googlebot类型： 桌面</td>
</tr>
<tr>
<td></td>
<td>已重定向 抓取时间：2017年6月26日星期一 GMT-7 下午8:25:37</td>
</tr>
<tr>
<td></td>
<td>此网址已重定向至：<a href="https://lincentma.men/">https://lincentma.men/</a></td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 301 Moved Permanently</div><div class="line">Content-Type: application/x-gzip</div><div class="line">Location: https://lincentma.men/</div><div class="line">Server: Coding Pages</div><div class="line">Vary: Accept-Encoding</div><div class="line">Date: Tue, 27 Jun 2017 03:25:39 GMT</div><div class="line">Content-Length: 57</div></pre></td></tr></table></figure>
<p>导致在Google上没有自己博客更新的文章。</p>
<h4 id="原因：Coding-Pages-产生中间页"><a href="#原因：Coding-Pages-产生中间页" class="headerlink" title="原因：Coding Pages 产生中间页"></a>原因：Coding Pages 产生中间页</h4><p>从上面的HTTP响应头部的标志可以看出，Google重定向到了一个Coding Pages的服务商，也就是我双线同步博客的coding pages。</p>
<p>在其官网上我发现：</p>
<blockquote>
<p>银牌会员的 Coding Pages 在访问时默认会先加载 Pages 跳转页，您可选择在网站首页任意位置放置「Hosted by Coding Pages」的文字版或图片版，然后勾选下方的「已放置 Hosted by Coding Pages」选项，通过审核后您的 Pages 将不会显示跳转页。请务必将「Hosted by Coding Pages」持续保留在网站首页，撤掉后跳转页会再次出现。</p>
</blockquote>
<p>也就是没有银牌会员或者没有在博客上加载广告的时候，就会先跳转到中间页。Google在抓取页面的时候就会发现和目标地址不一致，导致抓取失败。所以没有免费的午餐。</p>
<h3 id="2-百度-HTTPS站点认证失败"><a href="#2-百度-HTTPS站点认证失败" class="headerlink" title="2 - 百度 HTTPS站点认证失败"></a>2 - 百度 HTTPS站点认证失败</h3><p>失败详情：您的站点有链接未通过https检验。</p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>抓取操作不会跟踪重定向。如果您抓取的网页存在重定向，您将需要手动前往重定向到的网址。</li>
<li>301转向(或叫301重定向，301跳转)是当用户或搜索引擎向网站服务器发出浏览请求时，服务器返回的HTTP数据流中头信息(header)中的状态码的一种，表示本网页永久性转移到另一个地址。</li>
<li>302重定向是暂时的重定向，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。301重定向是永久的重定向，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。302 重定向会造成网址URL 劫持现象。</li>
<li>HTTP请求格式：</li>
</ul>
<table>
<thead>
<tr>
<th><strong>请求头</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Host</strong></td>
<td>接受请求的服务器地址，可以是IP:端口号，也可以是域名</td>
</tr>
<tr>
<td><strong>User-Agent</strong></td>
<td>发送请求的应用程序名称</td>
</tr>
<tr>
<td><strong>Connection</strong></td>
<td>指定与连接相关的属性，如Connection:Keep-Alive</td>
</tr>
<tr>
<td><strong>Accept-Charset</strong></td>
<td>通知服务端可以发送的编码格式</td>
</tr>
<tr>
<td><strong>Accept-Encoding</strong></td>
<td>通知服务端可以发送的数据压缩格式</td>
</tr>
<tr>
<td><strong>Accept-Language</strong></td>
<td>通知服务端可以发送的语言</td>
</tr>
</tbody>
</table>
<ul>
<li>HTTP响应格式：</li>
</ul>
<table>
<thead>
<tr>
<th><strong>响应头</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Server</strong></td>
<td>服务器应用程序软件的名称和版本</td>
</tr>
<tr>
<td><strong>Content-Type</strong></td>
<td>响应正文的类型（是图片还是二进制字符串）</td>
</tr>
<tr>
<td><strong>Content-Length</strong></td>
<td>响应正文长度</td>
</tr>
<tr>
<td><strong>Content-Charset</strong></td>
<td>响应正文使用的编码</td>
</tr>
<tr>
<td><strong>Content-Encoding</strong></td>
<td>响应正文使用的数据压缩格式</td>
</tr>
<tr>
<td><strong>Content-Language</strong></td>
<td>响应正文使用的语言</td>
</tr>
</tbody>
</table>
<ul>
<li><p>HTTPS：HTTPS 协议就是 HTTP+SSL/TLS，即在 HTTP 基础上加入 SSL /TLS 层，提供了内容加密、身份认证和数据完整性3大功能，目的就是为了加密数据，用于安全的数据传输。</p>
</li>
<li><p>其中一个问题：网站改用 HTTPS 以后，由 HTTP 跳转到 HTTPS 的方式增加了用户访问耗时（多数网站采用 301、302 跳转）</p>
</li>
<li><p>[推荐文章]: <a href="http://support.upyun.com/hc/kb/article/1044299/" target="_blank" rel="external">http://support.upyun.com/hc/kb/article/1044299/</a></p>
</li>
</ul>
<ul>
<li>Google宣布了，从2017年1月份正式发布的Chrome 56开始，Google将把某些包含敏感内容的https页面标记为“不安全”。</li>
</ul>
<p>HTTPS是趋势，然而Github不支持自定义域名的强制HTTPS，Coding国内的必须加广告才能强制HTTPS且没有中间跳转页。所以自己就开始了折腾HTTPS的道路。</p>
<h2 id="折腾HTTPS："><a href="#折腾HTTPS：" class="headerlink" title="折腾HTTPS："></a>折腾HTTPS：</h2><h3 id="折腾：配置CloudFare失败"><a href="#折腾：配置CloudFare失败" class="headerlink" title="折腾：配置CloudFare失败"></a>折腾：配置CloudFare失败</h3><p>终究会有免费的午餐，那就是CloudFare。</p>
<h4 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h4><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><ul>
<li><p>CloudFlare作为一家CDN提供商，他为免费用户提供的服务室不完整的，根据官网SSL服务的介绍，<strong>CloudFlare仅会在浏览器与CloudFlare的通讯中加密，CloudFlare与本地服务器的通讯本身并没有加密。</strong>这也是Flexible和Full模式的区别所在。</p>
</li>
<li><p>SSL：在客户端与服务器间传输的数据是通过使用对称算法（如 DES 或 RC4）进行加密的。公用密钥算法（通常为 RSA）是用来获得加密密钥交换和数字签名的，此算法使用服务器的SSL数字证书中的公用密钥。有了服务器的SSL数字证书，客户端也可以验证服务器的身份。SSL 协议的版本 1 和 2 只提供服务器认证。版本 3 添加了客户端认证，此认证同时需要客户端和服务器的数字证书。</p>
</li>
<li><p>关于Let&#39;s Encrypt：[给站点添加 https 小绿锁]: <a href="http://www.cnblogs.com/xinpureZhu/articles/lets-encrypt-to-add-https-site-little-green-lock.html" target="_blank" rel="external">http://www.cnblogs.com/xinpureZhu/articles/lets-encrypt-to-add-https-site-little-green-lock.html</a></p>
</li>
</ul>
<p>但是，都设置好了。然后就无法访问网页的了。DNS的锅。</p>
<p>发现阿里云的DNS修改后仍处于未更改的状态，即使CloudFlare显示Status：Active。</p>
<p>自己认为可能的是国外DNS被墙，或者是强制HTTPS生效时间过长导致没有及时生效。</p>
<h3 id="返回Coding-Pages-加广告"><a href="#返回Coding-Pages-加广告" class="headerlink" title="返回Coding Pages 加广告"></a>返回Coding Pages 加广告</h3><p>无奈返回去添加广告。</p>
<h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ul>
<li>Hexo ，快速、简单且功能强大的 <a href="http://lib.csdn.net/base/nodejs" target="_blank" rel="external">Node.js</a> 博客框架。</li>
<li>页面布局</li>
<li>Hexo中自己感觉一个很有意思的特点是，在_config.yml以及md文件中，通过对于指定字段的true或者false的设置来实现功能，对于使用者来说是黑盒操作，降低了使用难度，提高了使用的体验。这是一种很好的方式。</li>
</ul>
<h3 id="阿里云更改域名配置"><a href="#阿里云更改域名配置" class="headerlink" title="阿里云更改域名配置"></a>阿里云更改域名配置</h3><p>买了一个域名：lincentma.men</p>
<p>参考文章：[hexo博客添加域名实现双线部署（github和coding)]: <a href="http://blog.csdn.net/qiuchengjia/article/details/52923156" target="_blank" rel="external">http://blog.csdn.net/qiuchengjia/article/details/52923156</a></p>
<h4 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h4><ul>
<li>域名解析就是国际域名或者国内域名以及中文域名等域名申请后做的到IP地址的转换过程。IP地址是网路上标识您站点的数字地址，为了简单好记，采用域名来代替ip地址标识站点地址。域名的解析工作由DNS服务器完成。</li>
<li>域名解析的A：A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。</li>
<li>域名解析的CNAME：别名记录。这种记录允许您将多个名字映射到另外一个域名。通常用于同时提供WWW和MAIL服务的计算机。</li>
<li>A记录就是把一个域名解析到一个<strong>IP地址</strong>（Address，特制数字IP地址），而CNAME记录就是把域名解析到另外一个<strong>域名</strong>。</li>
<li>还有MX记录（邮件记录）和NS记录（解析服务器记录，NS记录只对子域名生效）</li>
</ul>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>[ ] 站点地图的HTTPS是安全的，其他页面是信息不安全的，why？</li>
<li>[ ] Ngnix与SSL</li>
<li>[ ] 自己在Github博客申请SSL证书</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;记如何折腾让博客加HTTPS&quot;&gt;&lt;a href=&quot;#记如何折腾让博客加HTTPS&quot; class=&quot;headerlink&quot; title=&quot;记如何折腾让博客加HTTPS
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://lincentma.men/tags/hexo/"/>
    
      <category term="https" scheme="http://lincentma.men/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>【解析】Java Skills For Interview</title>
    <link href="http://lincentma.men/java_skills_for_interview.html"/>
    <id>http://lincentma.men/java_skills_for_interview.html</id>
    <published>2017-06-25T17:43:55.000Z</published>
    <updated>2017-06-26T07:25:20.279Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="【解析】Java-Skills-For-Interview"><a href="#【解析】Java-Skills-For-Interview" class="headerlink" title="【解析】Java Skills For Interview"></a>【解析】Java Skills For Interview</h1><blockquote>
<p>从网上偶得之，把每个函数弄明白，源码是怎么写的，为什么这么写。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//import不要使用通配符，需要import哪一个就import哪一个。</span></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaSkillsForInterview</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">// String</span></div><div class="line">        String s = <span class="string">"abc"</span>;</div><div class="line">        s.charAt(<span class="number">0</span>);<span class="comment">//返回指定索引处的 char 值。</span></div><div class="line">        s.length();<span class="comment">//返回此字符串的长度。</span></div><div class="line">        s.substring(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//返回字符串的子字符串。beginIndex - 起始索引（包括），endIndex - 结束索引（不包括）。左闭右开。</span></div><div class="line">        s.substring(<span class="number">1</span>);<span class="comment">//返回beginIndex - 起始索引（包括）到字符串末尾的子字符串。</span></div><div class="line">        s.equals(<span class="string">"b"</span>);<span class="comment">//将此字符串与指定的对象比较。</span></div><div class="line">        s = s.trim();<span class="comment">//返回字符串的副本，忽略前导空白和尾部空白。用于删除字符串的头尾空白符。</span></div><div class="line">        s.indexOf(<span class="string">"a"</span>);<span class="comment">//返回指定字符在此字符串中第一次出现处的索引。如果此字符串中没有这样的字符，则返回-1。</span></div><div class="line">        s.indexOf(<span class="string">"a"</span>, <span class="number">1</span>);<span class="comment">//返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</span></div><div class="line">        s.lastIndexOf(<span class="string">"a"</span>);<span class="comment">//返回指定字符在此字符串中最后一次出现处的索引。</span></div><div class="line">        s.lastindexOf(<span class="string">"a"</span>, <span class="number">1</span>);<span class="comment">//返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</span></div><div class="line">        s.toCharArray();<span class="comment">//【常用】将此字符串转换为一个新的字符数组。</span></div><div class="line">        Integer.valueOf(s); <span class="comment">// returns an Integer object，valueOf会返回一个Integer（整型）对象</span></div><div class="line">        <span class="comment">//【注意】Integer类有一个静态缓存，存储了256个特殊的Integer对象——每个对象分别对应`-128 和127之间的一个值。</span></div><div class="line">        <span class="comment">// Integer.valueOf("127")==Integer.valueOf("127");【true】</span></div><div class="line">        <span class="comment">// Integer.valueOf("128")==Integer.valueOf("128");【false】</span></div><div class="line">        Integer.parseInt(s); <span class="comment">// returns an int primitive， 将形参s转化为整数。Interger.parseInt("1")=1;</span></div><div class="line">        String.valueOf(s); <span class="comment">// integer to string 返回指定参数的字符串表示形式。</span></div><div class="line"></div><div class="line">        <span class="comment">// StringBuilder</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="string">"a"</span>);<span class="comment">//将指定的字符串追加到此字符序列。</span></div><div class="line">        sb.insert(<span class="number">0</span>, <span class="string">"a"</span>); <span class="comment">//在index指示的字符之前插入指定的字符串。</span></div><div class="line">        sb.deleteCharAt(sb.length() - <span class="number">1</span>); <span class="comment">//在这个序列中的指定位置，此方法将删除字符。	</span></div><div class="line">        sb.reverse(); <span class="comment">//此方法会导致此字符序列被替换为该序列的反转序列。</span></div><div class="line">        sb.toString(); <span class="comment">//该方法返回一个字符串，它表示这个序列中的数据。</span></div><div class="line">        <span class="comment">//String 长度大小不可变</span></div><div class="line">        <span class="comment">//StringBuffer 和 StringBuilder 长度可变</span></div><div class="line">        <span class="comment">//StringBuffer 线程安全 StringBuilder 线程不安全</span></div><div class="line">        <span class="comment">//StringBuilder 速度快</span></div><div class="line">        </div><div class="line">        <span class="comment">// Array</span></div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//初始化方式1</span></div><div class="line">        <span class="keyword">char</span>[] b = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>&#125;;<span class="comment">//初始化方式2</span></div><div class="line">        <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//二维数组</span></div><div class="line">        <span class="keyword">int</span> m = a.length;<span class="comment">//数组长度</span></div><div class="line">        <span class="keyword">int</span> n = c[<span class="number">0</span>].length;<span class="comment">//二维数组的列数</span></div><div class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE; <span class="comment">//MAX_VALUE = 0x7fffffff （Java语言规范规定int型为4字节）</span></div><div class="line">        <span class="keyword">int</span> min = Integer.MIN_VALUE; <span class="comment">//MIN_VALUE = 0x80000000</span></div><div class="line">        Arrays.sort(a);<span class="comment">//数组升序排序	（import java.util.Arrays;）int[]，double[]，char[]等基数据类型的数组，只提供了默认的升序排列，没有提供相应的降序排列方法。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</div><div class="line">            System.out.println(c[i]);</div><div class="line">        &#125;<span class="comment">// 遍历数组输出元素</span></div><div class="line">        </div><div class="line">        <span class="comment">// List</span></div><div class="line">        <span class="comment">//List是一个接口，而ArrayList是一个类。 ArrayList继承并实现了List。 </span></div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();<span class="comment">//List初始化</span></div><div class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">//ArrayList初始化</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; list2 = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(); <span class="comment">//而为List</span></div><div class="line">        list.add(<span class="number">0</span>);<span class="comment">//指定元素E追加到列表的末尾。此方法返回true。</span></div><div class="line">        list.add(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//方法将指定的元素E在此列表中的指定位置。此方法不返回任何值。</span></div><div class="line">        list.addAll(list1);<span class="comment">//方法会将所有指定集合中的元素添加到此列表的结尾。</span></div><div class="line">        list.get(<span class="number">0</span>);<span class="comment">//此方法返回在此列表中的指定位置的元素。</span></div><div class="line">        list.size();<span class="comment">//此方法返回此列表中的元素数。</span></div><div class="line">        list.remove(list.size() - <span class="number">1</span>);<span class="comment">//此方法返回从列表中移除的元素。</span></div><div class="line">        <span class="comment">//Collections是一个类而Collection是一个接口。</span></div><div class="line">        Collections.sort(list);<span class="comment">//方法用于指定列表按升序进行排序，根据其元素的自然顺序。</span></div><div class="line">        Collections.sort(list, Collections.reverseOrder());<span class="comment">//反序排列。</span></div><div class="line">        <span class="comment">//自定义排序。根据Collections.sort重载方法来实现。</span></div><div class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o1 - o2;<span class="comment">// 0-&gt;1</span></div><div class="line">                <span class="comment">// return o2 - o1; 1-&gt;0</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="comment">// Stack</span></div><div class="line">        <span class="comment">// import java.util.Stack;  </span></div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        stack.push(<span class="number">0</span>);<span class="comment">//把项item压入栈顶，返回item参数。</span></div><div class="line">        stack.pop();<span class="comment">//返回位于堆栈顶部的元素，在这个过程中除去它。</span></div><div class="line">        stack.peek();<span class="comment">//返回到堆栈顶部的元素，但不会将其删除。</span></div><div class="line">        stack.isEmpty();<span class="comment">//栈是否为空。空返回true，否则false。</span></div><div class="line">        <span class="comment">// isEmpty() 和 empty()的区别：命名区别。</span></div><div class="line">        <span class="comment">// For example, it was named empty() in original class but was named isEmpty() of Collection interface.</span></div><div class="line">        stack.size(); <span class="comment">//栈中元素的个数。</span></div><div class="line">        stack.search(<span class="string">"code"</span>); <span class="comment">//此方法返回从1开始的位置，一个对象在栈中。栈顶位置为1。</span></div><div class="line">        </div><div class="line">        <span class="comment">// Queue add ‐‐‐‐‐‐&gt; remove, peek</span></div><div class="line">        <span class="comment">// import java.util.Queue;  import java.util.LinkedList;</span></div><div class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        q.add(<span class="number">0</span>);<span class="comment">//增加一个元索。</span></div><div class="line">        q.remove();<span class="comment">//移除并返回队列头部的元素。</span></div><div class="line">        q.peek();<span class="comment">//返回队列头部的元素。</span></div><div class="line">        <span class="comment">//Queue使用也可以offer()来加入元素，使用poll()来获取并移出元素。</span></div><div class="line">        q.isEmpty();<span class="comment">//返回队列是否为空。</span></div><div class="line">        q.size();<span class="comment">//返回队列中元素的个数。</span></div><div class="line">        </div><div class="line">        <span class="comment">// HashMap</span></div><div class="line">        <span class="comment">// import java.util.HashMap;</span></div><div class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();<span class="comment">//初始化。</span></div><div class="line">        map.put(<span class="string">'c'</span>, <span class="number">1</span>);<span class="comment">//关联与此映射中的指定键指定的值。添加映射。</span></div><div class="line">        map.get(<span class="string">'c'</span>);<span class="comment">//返回指定键映射在此标识哈希映射，或者null，如果映射不包含此键的值。</span></div><div class="line">        <span class="keyword">if</span> (map.containsKey(<span class="string">'c'</span>)) &#123;<span class="comment">//如果此映射包含指定键的映射关系返回true。</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (map.containsValue(<span class="number">1</span>)) &#123;<span class="comment">//如果此映射一个或多个键映射到指定值返回true。</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Character d : map.keySet()) &#123;<span class="comment">//遍历Hashmap的键集合。Set keySet()返回此映射中包含的键的set视图。</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Integer i : map.values()) &#123;<span class="comment">//遍历Hashmap的值集合。Collection values()返回此映射中包含的值的collection视图。</span></div><div class="line">        &#125;</div><div class="line">        map.isEmpty();<span class="comment">//如果此映射不包含键 - 值映射关系返回true。</span></div><div class="line">        map.size();<span class="comment">//返回键 - 值映射关系在这个映射中的数量。</span></div><div class="line">        </div><div class="line">        <span class="comment">// HashSet</span></div><div class="line">        <span class="comment">// HashSet借助HashMap来实现的，利用HashMap中Key的唯一性，来保证HashSet中不出现重复值。</span></div><div class="line">        <span class="comment">// HashMap中的Key是根据对象的hashCode() 和 euqals()来判断是否唯一的。</span></div><div class="line">        <span class="comment">// import java.util.HashSet;</span></div><div class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();<span class="comment">//初始化。</span></div><div class="line">        set.add(<span class="number">0</span>);<span class="comment">//将指定的元素添加到此集合，如果它是不存在的。</span></div><div class="line">        set.remove(<span class="number">0</span>);<span class="comment">//从集合中删除指定的元素（如果存在）。</span></div><div class="line">        <span class="keyword">if</span> (set.contains(<span class="number">0</span>)) &#123;<span class="comment">//如果此set包含指定的元素，则返回true。</span></div><div class="line">        &#125;</div><div class="line">        set.isEmpty();<span class="comment">//返回true如果此set不包含任何元素。</span></div><div class="line">        set.size();<span class="comment">//返回元素的数目（它的基数）。</span></div><div class="line">        </div><div class="line">        <span class="comment">// mini heap</span></div><div class="line">        <span class="comment">// import java.util.PriorityQueue;</span></div><div class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();<span class="comment">//初始化。</span></div><div class="line">        pq.add(<span class="number">0</span>);<span class="comment">//该方法调用返回true(所指定的Collection.add(E))</span></div><div class="line">        pq.offer(<span class="number">0</span>);<span class="comment">//该方法调用返回true(所指定的Queue.offer(E))</span></div><div class="line">        pq.remove();<span class="comment">//该方法调用返回true，如果此队列由于调用而更改的结果。</span></div><div class="line">        pq.peek();<span class="comment">//在方法调用返回此队列的头部，或null，如果此队列为空。但它不会将其删除。</span></div><div class="line">        pq.poll();<span class="comment">//方法用于检索并移除此队列的头，则返回null，如果此队列为空。	</span></div><div class="line">        pq.isEmpty();<span class="comment">//判读是否为空。</span></div><div class="line">        pq.size();<span class="comment">//在方法调用返回的元素在此集合数</span></div><div class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="阿里巴巴Java开发规范"><a href="#阿里巴巴Java开发规范" class="headerlink" title="阿里巴巴Java开发规范"></a>阿里巴巴Java开发规范</h2><p><a href="http://orj5hqpmw.bkt.clouddn.com/4ce9918d7f5a082177a8a2741d0ab3ce.pdf" target="_blank" rel="external">阿里巴巴Java开发规范</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;【解析】Java-Skills-For-Interview&quot;&gt;&lt;a href=&quot;#【解析】Java-Skills-For-Interview&quot; class=&quot;hea
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://lincentma.men/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历那点事</title>
    <link href="http://lincentma.men/binary_tree_traversal.html"/>
    <id>http://lincentma.men/binary_tree_traversal.html</id>
    <published>2017-06-24T15:34:33.000Z</published>
    <updated>2017-06-24T16:06:53.106Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="二叉树遍历那点事"><a href="#二叉树遍历那点事" class="headerlink" title="二叉树遍历那点事"></a>二叉树遍历那点事</h1><blockquote>
<p>刷leetcode，碰见二叉树，看了一下午二叉树遍历，还在茫然着，写出来就明白了。好脑子不如烂笔头。</p>
</blockquote>
<h2 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Definition for binary tree</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</div><div class="line">    <span class="keyword">private</span> BinaryTreeNode left;</div><div class="line">    <span class="keyword">private</span> BinaryTreeNode right;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(<span class="keyword">int</span> data, BinaryTreeNode left, BinaryTreeNode right)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(BinaryTreeNode left)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(BinaryTreeNode right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组转换为二叉树"><a href="#数组转换为二叉树" class="headerlink" title="数组转换为二叉树"></a>数组转换为二叉树</h2><ul>
<li>二叉树上的元素存放位置在数组中是固定的。</li>
<li>如果树的i位置（从0开始按层编号）有元素，就放在数组的i号位置，没有元素，数组对应的位置就空着。i的左右子树的编号为2i+1和2i+2。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</div><div class="line"></div><div class="line">    BinaryTreeNode root;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        TreeNode left;</div><div class="line">        TreeNode right;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> paraValue)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = paraValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</div><div class="line">        root = createBinaryTreeByArray(array, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">createBinaryTreeByArray</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        TreeNode tn = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (index &lt; array.length) &#123;</div><div class="line">            <span class="keyword">int</span> value = array[index];</div><div class="line">            tn = <span class="keyword">new</span> TreeNode(value);</div><div class="line">            tn.left = createBinaryTreeByArray(array, <span class="number">2</span> * index + <span class="number">1</span>);</div><div class="line">            tn.right = createBinaryTreeByArray(array, <span class="number">2</span> * index + <span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> tn;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="递归与非递归"><a href="#递归与非递归" class="headerlink" title="递归与非递归"></a>递归与非递归</h2><p>一言以蔽之，非递归比递归难太多。</p>
<p>前序递归遍历算法：访问根结点–&gt;递归遍历根结点的左子树–&gt;递归遍历根结点的右子树<br>中序递归遍历算法：递归遍历根结点的左子树–&gt;访问根结点–&gt;递归遍历根结点的右子树<br>后序递归遍历算法：递归遍历根结点的左子树–&gt;递归遍历根结点的右子树–&gt;访问根结点</p>
<p>明白了思路，递归代码几行就能搞定了。</p>
<p>但是问题来了：</p>
<p>摘自知乎：</p>
<ul>
<li>递归是函数自身调用自身，涉及到保护现场（变量入栈，记录地址等），时间和空间开销较大，而这操作都是在栈上，调用层级太多很容易溢出。</li>
<li>迭代（非递归）虽然也是用栈，可是这个栈和递归栈可不是一个概念，这个栈完全可以在堆上开辟，空间更大，不容易溢出。迭代也不涉及函数调用，效率也更高。</li>
</ul>
<p>如何写出非递归的遍历呢？如何把手写遍历结果的过程用代码表达出来。</p>
<p>非递归方法需要借助栈</p>
<h2 id="前序二叉树"><a href="#前序二叉树" class="headerlink" title="前序二叉树"></a>前序二叉树</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>前序遍历的递归定义：先根节点，后左子树，再右子树。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> != root) &#123;</div><div class="line">    System.out.print(root.val);</div><div class="line">    preOrder(root.getLeft());</div><div class="line">    preOrder(root.getRight());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><p>在手写结果的过程中，我们可以总结出以下规律：</p>
<ul>
<li>画出二叉树的图，输出顺序都是沿左下方向的直线，输出顺序LIFO，后进先出，满足栈的定义。</li>
<li>借助栈来保存节点，通过节点来打印右子树的数据。</li>
<li>只有入栈时才输出数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNonRecursive</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</div><div class="line">  Stack&lt;BinaryTreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;BinaryTreeNode&gt;();</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="comment">//首先从根节点开始遍历所有的左子树，并输出节点数据</span></div><div class="line">    <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">      System.out.print(root.getData() + <span class="string">"\t"</span>);</div><div class="line">      stack.push(root);</div><div class="line">      root = root.getLeft();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//循环终止条件：栈容量为0，说明右子树以及遍历完全，跳出。</span></div><div class="line">    <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//当上面的while循环完成后，也就是左子树输出完成，栈弹出元素，也就是离得最近的有右子树的节点。</span></div><div class="line">    root = stack.pop();</div><div class="line">    <span class="comment">//返回循环，以该节点作为新的root循环输出。</span></div><div class="line">    root = root.getRight();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="中序二叉树"><a href="#中序二叉树" class="headerlink" title="中序二叉树"></a>中序二叉树</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><p>中序遍历的递归定义：先左子树，后根节点，再右子树。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">        inorder(root.nodeLeft);</div><div class="line">        System.out.print(root.val);</div><div class="line">        inorder(root.nodeRight);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h3><p>在手写结果的过程中，我们可以总结出以下规律：</p>
<ul>
<li>与先序类似，只不过输出数据的时机发生了改变。</li>
<li>出栈的时候输出数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderNonRecursive</span><span class="params">(BinaryTreeNode root)</span> </span>&#123;</div><div class="line">  Stack&lt;BinaryTreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;BinaryTreeNode&gt;();</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="comment">//遍历左子树，并保存到栈中</span></div><div class="line">    <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">      stack.push(root);</div><div class="line">      root = root.getLeft();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//遍历跳出条件</span></div><div class="line">    <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//当上面的while循环完成后，也就是左子树输出完成，栈弹出元素，也就是离得最近的有右子树的节点。</span></div><div class="line">    root = stack.pop();</div><div class="line">    <span class="comment">//根据中序遍历的输出顺序，先输出左子树的节点的值</span></div><div class="line">    System.out.print(root.getData() + <span class="string">"\t"</span>);</div><div class="line">    <span class="comment">//以最左下的节点为例，它的右节点为null，那么再次循环时，就会跳过遍历左子树的循环，栈出栈的节点为它的父节点，也就是根节点，输出其值，再转为其右子树，完成中序遍历的输出顺序。</span></div><div class="line">    root = root.getRight();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后序二叉树"><a href="#后序二叉树" class="headerlink" title="后序二叉树"></a>后序二叉树</h2><h3 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h3><p>后序遍历的递归定义：先左子树，后右子树，再根节点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>)&#123;</div><div class="line">        postOrder(root.nodeLeft);</div><div class="line">        postOrder(root.nodeRight);</div><div class="line">        System.out.print(root.val);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非递归-2"><a href="#非递归-2" class="headerlink" title="非递归"></a>非递归</h3><p>在手写结果的过程中，我们可以总结出以下规律：</p>
<ul>
<li>与前面区别在于，判读出栈时，要考虑该节点是否在之前已经访问过。</li>
<li>在stack中，最后添加的数据需要通过lastElement方法获取。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderNonRecursive</span><span class="params">(BinaryTreeNode root)</span></span>&#123;</div><div class="line">    Stack&lt;BinaryTreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;BinaryTreeNode&gt;();</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        <span class="comment">//遍历左子树，并保存到栈中</span></div><div class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</div><div class="line">            stack.push(root);</div><div class="line">            root=root.getLeft();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//此时，当遍历到最左下的叶节点时，它的左子树是null。</span></div><div class="line">            <span class="comment">//后序遍历的顺序</span></div><div class="line">            <span class="keyword">if</span>(stack.isEmpty()) <span class="keyword">return</span>; <span class="comment">// 遍历终止条件1：栈空</span></div><div class="line">          </div><div class="line">            <span class="comment">//栈中最近添加的元素的右子树为空则弹出并输出该元素</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>==stack.lastElement().getRight())&#123;</div><div class="line">                root=stack.pop();</div><div class="line">                <span class="comment">//输出最开始左子树的叶节点，也就是遍历顺序中的左子树（以及代入的右子树值）</span></div><div class="line">                System.out.print(root.getData()+<span class="string">"\t"</span>);</div><div class="line">                <span class="comment">//while循环终止条件1：出栈后的最近添加的元素则为父节点的右子树与之前出栈的元素相等</span></div><div class="line">                <span class="keyword">while</span>(root==stack.lastElement().getRight())&#123;</div><div class="line">                    <span class="comment">//root（右子树遍历完成）与此时栈中的最近添加的元素（父节点）的右子树相等，那么说明lastElement为根节点</span></div><div class="line">                    <span class="comment">//输出根节点</span></div><div class="line">                    System.out.print(stack.lastElement().getData()+<span class="string">"\t"</span>);</div><div class="line">                    <span class="comment">//出栈（右子树的叶节点）</span></div><div class="line">                    root=stack.pop();</div><div class="line">                    <span class="comment">// while终止条件2：栈空</span></div><div class="line">                    <span class="keyword">if</span>(stack.isEmpty())&#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//栈不空，则root赋值为栈最近添加元素的右子树，开始从右子树继续遍历</span></div><div class="line">            <span class="keyword">if</span>(!stack.isEmpty())</div><div class="line">                root=stack.lastElement().getRight();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="comment">//栈空，赋值为null，确保进入遍历结束条件判断的地方</span></div><div class="line">                root=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：感觉有点绕，stack.lastElement()这个也可以用pre节点来代替，这样可能更便于理解。</p>
<h2 id="非递归的统一化"><a href="#非递归的统一化" class="headerlink" title="非递归的统一化"></a>非递归的统一化</h2><p>非递归是否也可以像递归一样，只用修改语句的位置，实现不同方式的遍历呢？</p>
<p>答案是肯定的，大牛就是多。</p>
<ul>
<li><p>统一三种更简单的非递归遍历方法的基本思想：<strong>有重合元素的局部有序一定能导致整体有序</strong>。</p>
<p><img src="http://zisong.qiniudn.com/algorithm%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86.png" alt="Alt text"></p>
</li>
</ul>
<ul>
<li>三种非递归遍历唯一不同的就是局部入栈的三行代码的先后顺序。所以不管是<code>根-&gt;左-&gt;右</code>,<code>左-&gt;根-&gt;右</code>,<code>左-&gt;右-&gt;根</code>,甚至是<code>根-&gt;右-&gt;左</code>,<code>右-&gt;根-&gt;左</code>,<code>右-&gt;左-&gt;根</code>定义的新顺序，算法实现都无变化，除了改变局部入栈顺序。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraversalNew</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">stack</span>&lt; pair&lt;TreeNode *, <span class="keyword">bool</span>&gt; &gt; s;</div><div class="line">    s.push(make_pair(root, <span class="literal">false</span>));</div><div class="line">    <span class="keyword">bool</span> visited;</div><div class="line">    <span class="keyword">while</span>(!s.empty())</div><div class="line">    &#123;</div><div class="line">        root = s.top().first;</div><div class="line">        visited = s.top().second;</div><div class="line">        s.pop();</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(visited)</div><div class="line">        &#123;</div><div class="line">            path.push_back(root-&gt;val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            s.push(make_pair(root, <span class="literal">true</span>));</div><div class="line">            s.push(make_pair(root-&gt;right, <span class="literal">false</span>));</div><div class="line">            s.push(make_pair(root-&gt;left, <span class="literal">false</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS: 有时间改写成Java版本的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;二叉树遍历那点事&quot;&gt;&lt;a href=&quot;#二叉树遍历那点事&quot; class=&quot;headerlink&quot; title=&quot;二叉树遍历那点事&quot;&gt;&lt;/a&gt;二叉树遍历那点事&lt;/h1
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="binary tree" scheme="http://lincentma.men/tags/binary-tree/"/>
    
      <category term="recursive" scheme="http://lincentma.men/tags/recursive/"/>
    
      <category term="iterate" scheme="http://lincentma.men/tags/iterate/"/>
    
  </entry>
  
  <entry>
    <title>Java、Python与PHP的虚拟机异同</title>
    <link href="http://lincentma.men/program_language_virtual_machine.html"/>
    <id>http://lincentma.men/program_language_virtual_machine.html</id>
    <published>2017-06-23T15:59:24.000Z</published>
    <updated>2017-06-23T16:07:27.662Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Java-JVM"><a href="#Java-JVM" class="headerlink" title="Java-JVM"></a>Java-JVM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>JDK(Java Development Kit) 是 Java 语言的软件开发工具包（SDK）。JDK 物理存在，是 programming tools、JRE 和 JVM 的一个集合</li>
<li>JRE（Java Runtime Environment）Java 运行时环境，JRE 物理存在，主要由Java API 和 JVM 组成，提供了用于执行 java 应用程序最低要求的环境。</li>
<li>JVM(Java Virtual Machine) 是一种软件实现，执行像物理机程序的机器（即电脑）。JVM 通过执行 Java bytecode 可以使 java 代码在不改变的情况下运行在各种硬件之上。JVM是基于栈的。</li>
</ul>
<h3 id="JVM-执行"><a href="#JVM-执行" class="headerlink" title="JVM 执行"></a>JVM 执行</h3><ul>
<li>加载代码</li>
<li>验证代码</li>
<li>执行代码</li>
<li>提供运行环境</li>
</ul>
<h3 id="JVM-生命周期"><a href="#JVM-生命周期" class="headerlink" title="JVM 生命周期"></a>JVM 生命周期</h3><ul>
<li>启动：任何一个拥有main函数的class都可以作为JVM实例运行的起点</li>
<li>运行：main函数为起点，程序中的其他线程均有它启动，包括daemon守护线程和non-daemon普通线程。daemon是JVM自己使用的线程比如GC线程，main方法的初始线程是non-daemon。</li>
<li>消亡：所有线程终止时，JVM实例结束生命。</li>
</ul>
<h3 id="JVM结构及内存模型"><a href="#JVM结构及内存模型" class="headerlink" title="JVM结构及内存模型"></a>JVM结构及内存模型</h3><p><img src="http://upload-images.jianshu.io/upload_images/634730-089a64921220b40d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>名词解释：</p>
<ul>
<li>Class Loader：类加载器负责加载程序中的类型（类和接口），并赋予唯一的名字。为什么使用双亲委托模型——ClassLoader 隔离问题。</li>
<li>Execution Engine：执行引擎。执行引擎以指令为单位读取 Java 字节码。它就像一个 CPU 一样，一条一条地执行机器指令。</li>
<li>Runtime Data Areas:：运行时数据区。</li>
<li>PS：想起面试的时候被问到过这样的问题：你在使用java过程中是否遇到过OOM的情况？当时一阵懵比。现在总结下：<ul>
<li>PC寄存器（PC Register）是唯一一个在 Java 虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
<li>JVM 栈（Java Virtual Machine Stack）：如果JVM Stack可以动态扩展，但是在尝试扩展时无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的虚拟机栈时抛出。</li>
<li>本地方法栈(Native method stack)：如果本地方法栈可以动态扩展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的本地方法栈，那Java虚拟机将会抛出一个OutOfMemoryError异常。</li>
<li>方法区(Method area)：如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常。</li>
<li>运行时常量池(Runtime constant pool)：当创建类和接口时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大内存空间后就会抛出OutOfMemoryError</li>
<li>堆(Heap)：如果实际所需的堆超过了自动内存管理系统能提供的最大容量时抛出。</li>
<li>总结一下就是无法申请到足够的内存以及超出最大容量两方面原因</li>
</ul>
</li>
</ul>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p><img src="http://upload-images.jianshu.io/upload_images/2184951-327156d44f4f2446.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><p>新生代由 Eden 与 Survivor Space（S0，S1）构成，大小通过-Xmn参数指定，Eden 与 Survivor Space 的内存大小比例默认为8:1，可以通过-XX:SurvivorRatio 参数指定，比如新生代为10M 时，Eden分配8M，S0和S1各分配1M。</p>
<p>Eden：希腊语，意思为伊甸园，在圣经中，伊甸园含有乐园的意思，根据《旧约·创世纪》记载，上帝耶和华照自己的形像造了第一个男人亚当，再用亚当的一个肋骨创造了一个女人夏娃，并安置他们住在了伊甸园。</p>
<p>大多数情况下，对象在Eden中分配，当Eden没有足够空间时，会触发一次Minor GC，虚拟机提供了-XX:+PrintGCDetails参数，告诉虚拟机在发生垃圾回收时打印内存回收日志。</p>
<p>Survivor：意思为幸存者，是新生代和老年代的缓冲区域。<br>当新生代发生GC（Minor GC）时，会将存活的对象移动到S0内存区域，并清空Eden区域，当再次发生Minor GC时，将Eden和S0中存活的对象移动到S1内存区域。</p>
<p>存活对象会反复在S0和S1之间移动，当对象从Eden移动到Survivor或者在Survivor之间移动时，对象的GC年龄自动累加，当GC年龄超过默认阈值15时，会将该对象移动到老年代，可以通过参数-XX:MaxTenuringThreshold 对GC年龄的阈值进行设置。</p>
</li>
</ul>
<ul>
<li><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><p>老年代的空间大小即-Xmx 与-Xmn 两个参数之差，用于存放经过几次Minor GC之后依旧存活的对象。当老年代的空间不足时，会触发Major GC/Full GC，速度一般比Minor GC慢10倍以上。</p>
</li>
</ul>
<ul>
<li><h4 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h4><p>在JDK8之前的HotSpot实现中，类的元数据如方法数据、方法信息（字节码，栈和变量大小）、运行时常量池、已确定的符号引用和虚方法表等被保存在永久代中，32位默认永久代的大小为64M，64位默认为85M，可以通过参数-XX:MaxPermSize进行设置，一旦类的元数据超过了永久代大小，就会抛出OOM异常。</p>
<p>虚拟机团队在JDK8的HotSpot中，把永久代从Java堆中移除了，并把类的元数据直接保存在本地内存区域（堆外内存），称之为元空间。</p>
<p>这样做有什么好处？<br>有经验的同学会发现，对永久代的调优过程非常困难，永久代的大小很难确定，其中涉及到太多因素，如类的总数、常量池大小和方法数量等，而且永久代的数据可能会随着每一次Full GC而发生移动。</p>
<p>而在JDK8中，类的元数据保存在本地内存中，元空间的最大可分配空间就是系统可用内存空间，可以避免永久代的内存溢出问题，不过需要监控内存的消耗情况，一旦发生内存泄漏，会占用大量的本地内存。</p>
</li>
</ul>
<h4 id="判断垃圾回收"><a href="#判断垃圾回收" class="headerlink" title="判断垃圾回收"></a>判断垃圾回收</h4><ol>
<li><p>引用计数法：在对象上添加一个引用计数器，每当有一个对象引用它时，计数器加1，当使用完该对象时，计数器减1，计数器值为0的对象表示不可能再被使用。引用计数法实现简单，判定高效，但不能解决对象之间相互引用的问题。</p>
</li>
<li><p>可达性分析法：通过一系列称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，搜索路径称为 “引用链”，以下对象可作为GC Roots：</p>
<ul>
<li>本地变量表中引用的对象</li>
<li>方法区中静态变量引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>Native方法引用的对象</li>
</ul>
<p>当一个对象到 GC Roots 没有任何引用链时，意味着该对象可以被回收。</p>
</li>
</ol>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><ol>
<li>标记-清除算法<br>对待回收的对象进行标记。<br>算法缺点：效率问题，标记和清除过程效率都很低；空间问题，收集之后会产生大量的内存碎片，不利于大对象的分配。</li>
<li>复制算法<br>复制算法将可用内存划分成大小相等的两块A和B，每次只使用其中一块，当A的内存用完了，就把存活的对象复制到B，并清空A的内存，不仅提高了标记的效率，因为只需要标记存活的对象，同时也避免了内存碎片的问题，代价是可用内存缩小为原来的一半。</li>
<li>标记-整理算法<br>在老年代中，对象存活率较高，复制算法的效率很低。在标记-整理算法中，标记出所有存活的对象，并移动到一端，然后直接清理边界以外的内存。</li>
</ol>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><p>[清蒸 JVM （一）]: <a href="http://www.importnew.com/23658.html" target="_blank" rel="external">http://www.importnew.com/23658.html</a></p>
</li>
<li><p>[Java GC的那些事（上）]: <a href="http://www.importnew.com/23633.html" target="_blank" rel="external">http://www.importnew.com/23633.html</a></p>
</li>
<li><p>[Java GC的那些事（下）]: <a href="http://www.importnew.com/23640.html" target="_blank" rel="external">http://www.importnew.com/23640.html</a></p>
</li>
</ol>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h3><p>PVM是Python的运行引擎。他通常表现为python系统的一部分。并且他是实际运行脚本的组件。</p>
<p>编译器：将源码编译成运行在虚拟机上执行的opcode(pyc文件)，pyc文件是在python虚拟机上执行的一种跨平台字节码。</p>
<p>运行时：虚拟机解释器把opcode(pyc文件)解释成具体机器的机器码，执行。</p>
<h3 id="JVM与PVM"><a href="#JVM与PVM" class="headerlink" title="JVM与PVM"></a>JVM与PVM</h3><ul>
<li>Java代码从源程序到执行，要经过的过程是：编译器(javac)把源代码转化为字节码，然后解释器（Java.exe）把字节码转换为计算机理解的机器码来执行。其中编译器和解释器都是Java虚拟机（JVM）的一部分，由于针对不同的硬件与OS，Java解释器有所不同，因此可以实现“一次编译、到处执行”。所以JVM是Java跨平台特性的关键所在。</li>
<li>对于Python，其源代码到执行也要经过如下过程：源代码—&gt;字节码—&gt;机器码。与Java不同的是，Python使用的虚拟机是基于其他语言实现的，比如我们一般使用的Python实际为Cpython，也就是其虚拟机由C实现，这个虚拟机负责把Python源码编译为字节码，再解释执行。另外，还有Jypython、Ironpython等。</li>
</ul>
<h2 id="PHP-Zend-amp-HHVM"><a href="#PHP-Zend-amp-HHVM" class="headerlink" title="PHP-Zend&amp;HHVM"></a>PHP-Zend&amp;HHVM</h2><p><img src="http://img.it-home.org/data/attachment/forum/2016pic3/20141226102950_924.jpg" alt=""></p>
<ul>
<li>Zend引擎默认做法，是先编译为opcode，然后再逐条执行，通常每条指令对应的是C语言级别的函数。如果我们产生大量重复的opcode（纯PHP写的代码和函数），对应的则是Zend多次逐条执行这些C代码。</li>
<li>HHVM生成和执行PHP的中间字节码（HHVM生成自己格式的中间字节码），执行时通过JIT（Just In Time，即时编译是种软件优化技术，指在运行时才会去编译字节码为机器码）转为机器码执行。JIT将大量重复执行的字节码在运行的时候编译为机器码，达到提高执行效率的目的。通常，触发JIT的条件是代码或者函数被多次重复调用。</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>时间匆忙，囫囵吞枣，努力完善。</p>
<p>后端开发离不开Java，python和php，深入学习原理，比较异同，最佳使用。</p>
<p>2017.06.23</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;Java-JVM&quot;&gt;&lt;a href=&quot;#Java-JVM&quot; class=&quot;headerlink&quot; title=&quot;Java-JVM&quot;&gt;&lt;/a&gt;Java-JVM&lt;/h2
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://lincentma.men/tags/python/"/>
    
      <category term="java" scheme="http://lincentma.men/tags/java/"/>
    
      <category term="virtual machine" scheme="http://lincentma.men/tags/virtual-machine/"/>
    
      <category term="php" scheme="http://lincentma.men/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>几个小问题的解答</title>
    <link href="http://lincentma.men/learn_for_some_questions.html"/>
    <id>http://lincentma.men/learn_for_some_questions.html</id>
    <published>2017-06-22T15:25:38.000Z</published>
    <updated>2017-06-22T15:43:43.699Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>她给我提了一下几个问题，自己一眼看上去觉得简单，但是说不出来所以然，犯了眼高手低的毛病，记录自省。</p>
</blockquote>
<ul>
<li>[x] 一共10级楼梯，每次可以走一步或两步，求一共多少种走法。</li>
<li>[x] 一个细胞，一个小时分裂一次，生命周期是3小时，求n小时后容器内，有多少细胞。</li>
<li>[x] 斐波那契数列的实现。</li>
<li>[x] 递归算法的核心</li>
</ul>
<h1 id="Question1—走楼梯"><a href="#Question1—走楼梯" class="headerlink" title="Question1—走楼梯"></a>Question1—走楼梯</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>楼梯问题，一眼看上去，应该是一个递归问题跑不了了。</p>
<p>那么该如何递归，找到其中的规律呢？</p>
<p><strong><em>逆向思考。</em></strong></p>
<p>要想走到M(M=10)级,可以分为2种情况。 </p>
<ol>
<li>从m-2级迈两步 </li>
<li>从m-1级迈一步 </li>
</ol>
<p>那么对于m-2和m-1的情况也是各自分为两种，以此类推。</p>
<p>那么走法的和就是m-2的走法和m-1的走法之和。</p>
<p>那么递归到最基本的（当前人在第0阶台阶）</p>
<p>第0阶台阶：0</p>
<p>第1阶台阶：1</p>
<p>第2阶台阶：2（1+1或者2）</p>
<p>得到公式，也就是斐波那契数列。<br>$$<br>f(n)=f(n-1)+f(n-2)<br>$$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ml on 2017/6/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taijie</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNumber</span><span class="params">(<span class="keyword">int</span> stepsNum)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (stepsNum == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (stepsNum == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepsNum == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepsNum &gt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span>  countNumber(stepsNum - <span class="number">2</span>) + countNumber(stepsNum - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startMili=System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"楼梯台阶数:"</span> + i + <span class="string">", 走法有:"</span> + countNumber(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> endMili=System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"耗时:"</span> + String.valueOf(endMili - startMili) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">楼梯台阶数:0, 走法有:0</div><div class="line">楼梯台阶数:1, 走法有:1</div><div class="line">楼梯台阶数:2, 走法有:2</div><div class="line">楼梯台阶数:3, 走法有:3</div><div class="line">楼梯台阶数:4, 走法有:5</div><div class="line">楼梯台阶数:5, 走法有:8</div><div class="line">楼梯台阶数:6, 走法有:13</div><div class="line">楼梯台阶数:7, 走法有:21</div><div class="line">楼梯台阶数:8, 走法有:34</div><div class="line">楼梯台阶数:9, 走法有:55</div><div class="line">楼梯台阶数:10, 走法有:89</div><div class="line">耗时:0毫秒</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h2 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h2><p>该算法的运算时间是指数级增长的，还有其他方法吗？</p>
<p>动态规划？</p>
<p>其实动态规划（dynamicprogramming）是通过组合子问题而解决整个问题的解。乍一看和递归的写法差不多，都是相加。但是递归式是包含了许多重复计算的步骤，对应台阶就是每一个台阶计算前面都是重复的。动态规划<a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="external">算法</a>对每个子问题只求解一次，将其结果保存起来，从而避免每次遇到各个子问题时重新计算答案。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ml on 2017/6/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taijie</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> n;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//注意坐标起始点的区别</span></div><div class="line">        <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        r[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        r[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</div><div class="line">            r[i] = r[i-<span class="number">1</span>] + r[i-<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> r[n];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startMili=System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"楼梯台阶数:"</span> + i + <span class="string">", 走法有:"</span> + climbStairs(i));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> endMili=System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"耗时:"</span> + String.valueOf(endMili - startMili) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">楼梯台阶数:0, 走法有:0</div><div class="line">楼梯台阶数:1, 走法有:1</div><div class="line">楼梯台阶数:2, 走法有:2</div><div class="line">楼梯台阶数:3, 走法有:3</div><div class="line">楼梯台阶数:4, 走法有:5</div><div class="line">楼梯台阶数:5, 走法有:8</div><div class="line">楼梯台阶数:6, 走法有:13</div><div class="line">楼梯台阶数:7, 走法有:21</div><div class="line">楼梯台阶数:8, 走法有:34</div><div class="line">楼梯台阶数:9, 走法有:55</div><div class="line">楼梯台阶数:10, 走法有:89</div><div class="line">耗时:0毫秒</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>之前数学课本上如何思考的？</p>
<ol>
<li>先求出走完台阶需要几步？</li>
<li>再求出总步数中，走一个台阶是几步，走两个台阶式几步，不同种类为排列组合计算</li>
</ol>
<h2 id="类似问题"><a href="#类似问题" class="headerlink" title="类似问题"></a>类似问题</h2><p>再看一个硬币的凑法：</p>
<blockquote>
<p>用1分、2分和5分的硬币凑成1元，共有多少种不同的凑法？（华为机试题）</p>
</blockquote>
<p>它和走楼梯的区别在于，楼梯不同顺序是不同的走法，硬币则与顺序无关，程序可用穷举法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">coin</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getKinds</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">100</span>-<span class="number">5</span>*i; j++) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">100</span>-<span class="number">5</span>*i-<span class="number">2</span>*j; k++) &#123;</div><div class="line">					<span class="keyword">if</span>(<span class="number">5</span>*i+<span class="number">2</span>*j+k==<span class="number">100</span>)&#123;</div><div class="line">						num++;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(getKinds());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么这个问题可以推广为一般性问题吗？M阶，一次走a阶或者b阶或者。。。，求不同走法。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><h1 id="Question2—细胞分裂"><a href="#Question2—细胞分裂" class="headerlink" title="Question2—细胞分裂"></a>Question2—细胞分裂</h1><h2 id="非递归思路"><a href="#非递归思路" class="headerlink" title="非递归思路"></a>非递归思路</h2><p>乍一看，关键是如何处理生命周期是3小时。如何在分裂的同时提出死亡的细胞。</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ml on 2017/6/22.</div><div class="line"> * 思路：每个细胞定义为一维数组的元素，元素的值为细胞的生存时间，每分裂一次，在数组末尾添加新的元素，初始值为0，同时原来的元素值加1</div><div class="line"> * 当元素的值为3时，将该元素剔除</div><div class="line"> * 最后返回该数组的大小</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xibao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cellNum2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; cell = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="comment">//定义cellnum</span></div><div class="line">        <span class="keyword">int</span> cellnum = <span class="number">0</span>;</div><div class="line">        <span class="comment">//加入初始细胞</span></div><div class="line">        cell.add(<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="comment">//记录当前数组大小（剔除完成后的数组）</span></div><div class="line">            <span class="keyword">int</span> size = cell.size();</div><div class="line">            <span class="comment">//计算分裂后新的数组的大小</span></div><div class="line">            cellnum = <span class="number">2</span> * cell.size();</div><div class="line">            <span class="comment">//原有生存时间加1</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cell.size(); j++) &#123;</div><div class="line">                cell.set(j, cell.get(j) + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//遍历剔除元素值为3 PS：ArrayList中遍历可以删除的只有迭代器</span></div><div class="line">            Iterator&lt;Integer&gt; it = cell.iterator();</div><div class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">                <span class="keyword">if</span> (it.next().equals(<span class="number">3</span>))</div><div class="line">                    it.remove();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//在数组末尾添加新的元素</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &lt; cellnum; j++) &#123;</div><div class="line">                cell.add(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cell.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cellNum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        HashMap&lt;Integer, Integer&gt; cell = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> cellnum = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            cellnum *= <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> size = cell.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = size; j &lt; cellnum; j++) &#123;</div><div class="line">                cell.put(j, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            Iterator&lt;HashMap.Entry&lt;Integer, Integer&gt;&gt; iter = cell.entrySet().iterator();</div><div class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">                Map.Entry entry = iter.next();</div><div class="line">                <span class="keyword">int</span> key = (<span class="keyword">int</span>) entry.getKey();</div><div class="line">                <span class="keyword">int</span> val = (<span class="keyword">int</span>) entry.getValue();</div><div class="line">                <span class="keyword">if</span> (key &lt; size) &#123;</div><div class="line">                    cell.put(key, val + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cell.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startMili = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> n = <span class="number">6</span>;</div><div class="line">        System.out.println(n + <span class="string">"小时后容器细胞:"</span> + cellNum2(n) + <span class="string">"个"</span>);</div><div class="line">        <span class="keyword">long</span> endMili = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"耗时:"</span> + String.valueOf(endMili - startMili) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3小时后容器细胞:7个</div><div class="line">耗时:0毫秒</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h3 id="关于ArrayList"><a href="#关于ArrayList" class="headerlink" title="关于ArrayList"></a>关于ArrayList</h3><ol>
<li>迭代器是作为当前集合的内部类实现的，当迭代器创建的时候保持了当前集合的引用；</li>
<li>集合内部维护一个字段叫modiCount，用来记录集合被修改的次数，比如add，remove，set等都会使该字段递增；</li>
<li>迭代器内部也维护着当前集合的修改次数的字段，迭代器创建时该字段初始化为集合的modiCount值</li>
<li>当每一次迭代时，迭代器会比较迭代器维护的字段和modiCount的值是否相等，如果不相等就抛ConcurrentModifiedException异常；</li>
<li>当然，如果用迭代器调用remove方法，那么集合和迭代器维护的修改字数都会递增，以保持两个状态的一致。</li>
</ol>
<p>这就是为什么你只可以用迭代器来删除，而不能用其他方式来修改集合。</p>
<h2 id="这类问题如何递归？"><a href="#这类问题如何递归？" class="headerlink" title="这类问题如何递归？"></a>这类问题如何递归？</h2><p>公式法：<br>$$<br>n=t/a<del>~</del><del>~</del>~~y=2^n<br>$$<br>但是这个只适用于最简单的没有任何附加状态条件的情况。</p>
<p>递归如何来分析？</p>
<p>细胞的生存周期是3个小时，那我们就可以把细胞在题目中状态分为以下几个状态：</p>
<ul>
<li>a：刚分裂态——1</li>
<li>b：分裂1小时态——a分裂出b和a</li>
<li>c：分裂2小时态——b分裂出c和a</li>
<li>d：分裂3小时态——死亡（停止分裂）</li>
</ul>
<p>那么，我们就可以根据细胞状态设定函数。分析每一个状态的来源是哪里即可。<br>$$<br>a(t)=a(t-1)+b(t-1)+c(t-1)\\b(t)=a(t-1)\\c(t)=b(t-1)\\d(t)=d(t-1)+c(t-1)<br>$$<br>容器中存活的细胞数目就是a、b、c三种状态数量的总和。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ml on 2017/6/22.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xibao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">aStatus</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> aStatus(t - <span class="number">1</span>) + bStatus(t - <span class="number">1</span>) + cStatus(t - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bStatus</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> aStatus(t-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cStatus</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bStatus(t-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dStatus</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dStatus(t-<span class="number">1</span>) + cStatus(t-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startMili = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</div><div class="line">        <span class="keyword">int</span> res = aStatus(n) + bStatus(n) + cStatus(n);</div><div class="line">        System.out.println(n + <span class="string">"小时后容器细胞:"</span> + res + <span class="string">"个"</span>);</div><div class="line">        <span class="keyword">long</span> endMili = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"耗时:"</span> + String.valueOf(endMili - startMili) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3小时后容器细胞:7个</div><div class="line">耗时:0毫秒</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h2 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h2><h1 id="Question3—Fibonacci数列"><a href="#Question3—Fibonacci数列" class="headerlink" title="Question3—Fibonacci数列"></a>Question3—Fibonacci数列</h1><p>经典问题：求Fibonacci数列前n项。<br>$$<br>{an}：a1=1，a2=1，a_{n+2}=a_{n+1}+a_n（n≥1）。<br>$$</p>
<p>PS: Markdown 中公式书写规则</p>
<ul>
<li><code>\\</code>符号后接的字符为上标</li>
<li><code>^</code>符号后接的字符为上标 </li>
<li><code>_</code>符号后接的字符为下标 </li>
<li>如果同时有两个下标，则需要使用<code>{}</code>来将符号括起来</li>
</ul>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fab</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++)&#123;</div><div class="line">            System.out.print(recursion(i) + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++)&#123;</div><div class="line">            System.out.print(loop(i) + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 递归</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> recursion(n -<span class="number">1</span>) + recursion(n -<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 循环</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">loop</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> s1 = <span class="number">1</span>,s2 = <span class="number">1</span>, sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n - <span class="number">2</span>; i ++)&#123;</div><div class="line">            sum = s1 + s2;</div><div class="line">            s1 = s2;</div><div class="line">            s2 = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 1 2 3 5 8 13 21 34 </div><div class="line">1 1 2 3 5 8 13 21 34 </div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>值得注意的是（递归方法有栈溢出的风险）。</p>
<h2 id="参考文章-2"><a href="#参考文章-2" class="headerlink" title="参考文章"></a>参考文章</h2><h1 id="Question4—递归核心"><a href="#Question4—递归核心" class="headerlink" title="Question4—递归核心"></a>Question4—递归核心</h1><p>那么总结一下，递归算法的核心是什么呢？</p>
<p>那就是：</p>
<ul>
<li><strong><em><u>在有限次可预见性结果中，找到结果与上一次结果之间的关系。</u></em></strong></li>
<li>f(n)与f(n-1)的关系有时候很简单，如同走楼梯，状态单一；又有时如同细胞分裂，多种状态组合影响结果。</li>
<li>关键在于梳理清楚本次结果和上一次结果的关系有哪些方面或是因素，刚开始看的时候可能会很乱。</li>
<li>在草稿纸上写出前几次的结果，或者画图，这样更容易找到规律，这种规律实际上就是递归方程。</li>
<li><strong>*在算法的分析中，当一个算法中包含递归调用时，其时间复杂度的分析会转化成为一个递归方程的求解。而对递归方程的求解，方法多种多样，不一而足。</strong></li>
</ul>
<p>动态规划就是在递归的基础上，保存每一步的数据，避免重复计算。<br>在递归计算调用次数过多时，可以考虑更换其他方法解答。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;她给我提了一下几个问题，自己一眼看上去觉得简单，但是说不出来所以然，犯了眼高手低的毛病，记录自省。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="开发笔记" scheme="http://lincentma.men/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://lincentma.men/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Rank小记</title>
    <link href="http://lincentma.men/learn_rank.html"/>
    <id>http://lincentma.men/learn_rank.html</id>
    <published>2017-06-21T04:13:27.000Z</published>
    <updated>2017-06-22T03:16:46.299Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><pre><code>搜索引擎，你每天用的，知其然，不知其所以然。
                                        ——读《搜索引擎 : 信息检索实践》
</code></pre><h2 id="信息检索的定义"><a href="#信息检索的定义" class="headerlink" title="信息检索的定义"></a>信息检索的定义</h2><p>信息检索是关于信息的结构、分析、组织、存储、搜索和检索的领域——Gerard Salton</p>
<h2 id="搜索引擎的指标"><a href="#搜索引擎的指标" class="headerlink" title="搜索引擎的指标"></a>搜索引擎的指标</h2><p>处理数十亿网页的商业化网络搜索引擎时代的今天，搜索引擎的指标体现在以下五个方面：</p>
<ol>
<li>全</li>
<li>新</li>
<li>准</li>
<li>快</li>
<li>稳</li>
</ol>
<p>其中Rank的目标就是准</p>
<h2 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h2><p>如何所搜即所得是Rank的目的。</p>
<ul>
<li>海量网页快速排序</li>
<li>相关性：搜索结果与用户需求的匹配程度 </li>
</ul>
<ol>
<li>多样性（Query对应多个结果，通过用户行为数据进行选择和匹配）</li>
<li>权威性（被引用次数，链接分析。类似于学术文章的因子。）</li>
<li>时效性（Query的频次随时间的变化趋势）</li>
<li>个性化（构建用户个人数据，计算结果与用户喜好匹配程度）</li>
<li>用户成本</li>
</ol>
<h3 id="如何排序"><a href="#如何排序" class="headerlink" title="如何排序"></a>如何排序</h3><p>自己的理解，排序就是算分，按照分数来进行排序，key是算分。</p>
<blockquote>
<p>经典IR模型:TF-IDF是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。TF-IDF加权的各种形式常被搜索引擎应用，作为文件与用户查询之间相关程度的度量或评级。<br>距离特征</p>
<p>Boolean Model：布尔（Boolean）模型是基于集合论和布尔代数的一种简单检索模型。它的特点是查找那些于某个查询词返回为“真”的文档。在该模型中，一个查询词就是一个布尔表达式，包括关键词以及逻辑运算符。通过布尔表达式，可以表达用户希望文档所具有的特征。</p>
<p>Vetor-Space:VSM概念简单，把对文本内容的处理简化为向量空间中的向量运算，并且它以空间上的相似度表达语义的相似度，直观易懂。当文档被表示为文档空间的向量，就可以通过计算向量之间的相似性来度量文档间的相似性。文本处理中最常用的相似性度量方式是余弦距离</p>
</blockquote>
<h3 id="Rank关键技术"><a href="#Rank关键技术" class="headerlink" title="Rank关键技术"></a>Rank关键技术</h3><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>在线计算转为离线计算<br>分布式计算系统</p>
<h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><p>辣鸡信息：找出特征，计算分数，剔除。</p>
<h4 id="人工识别与机器学习。"><a href="#人工识别与机器学习。" class="headerlink" title="人工识别与机器学习。"></a>人工识别与机器学习。</h4><p>Learning to Rank</p>
<p>找了一些文档博客，慢慢学习~</p>
<p>Point-Wise：RankSVM<br>Pair-Wise：RankNet<br>List-Wise：RankForest</p>
<p><em>努力学算法一定可以搞懂的！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;pre&gt;&lt;code&gt;搜索引擎，你每天用的，知其然，不知其所以然。
                                        ——读《搜索引擎 : 信息检索实
    
    </summary>
    
      <category term="intern" scheme="http://lincentma.men/categories/intern/"/>
    
    
      <category term="rank" scheme="http://lincentma.men/tags/rank/"/>
    
  </entry>
  
  <entry>
    <title>为找工作而准备着</title>
    <link href="http://lincentma.men/prepare_for_work.html"/>
    <id>http://lincentma.men/prepare_for_work.html</id>
    <published>2017-06-17T08:57:30.000Z</published>
    <updated>2017-06-22T03:15:06.575Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="为找工作而准备着"><a href="#为找工作而准备着" class="headerlink" title="为找工作而准备着"></a>为找工作而准备着</h1><h2 id="行业了解"><a href="#行业了解" class="headerlink" title="行业了解"></a>行业了解</h2><p>互联网+行业——改变传统行业</p>
<p>未来的行业是属于数据驱动的行业：</p>
<ul>
<li>物流行业（快递物流数据），物流成本仍有巨大空间优化</li>
<li>金融行业（金融数据），普惠金融有广阔的空间</li>
<li>电商行业（交易数据），定制化，差异化，个性化会随着物质条件的不断提高而不断重要</li>
<li>视频行业（视频数据），视频对于文件具有更有效地传播</li>
<li>农业（作物，天气等数据），高品质农业作物的需求不断上升，小作坊式模式对于行情波动的适应性有巨大的改善空间</li>
<li>云（云数据），理论上任何公司的数据都可以上云来进行弹性管理，提高效率</li>
<li>新兴科技（新兴技术），探索无止境，更多广阔的市场是由新兴技术所开创</li>
</ul>
<h2 id="公司了解"><a href="#公司了解" class="headerlink" title="公司了解"></a>公司了解</h2><ul>
<li>物流行业：菜鸟物流</li>
<li>金融行业：蚂蚁金融、支付宝、微信支付</li>
<li>电商行业：阿里巴巴、京东、美团点评、网易严选考拉</li>
<li>视频行业：今日头条、腾讯视频、B站</li>
<li>农业：网易未央、京东、联想农业</li>
<li>云：阿里云、腾讯云</li>
<li>新兴科技：大疆科技</li>
</ul>
<h2 id="部门了解"><a href="#部门了解" class="headerlink" title="部门了解"></a>部门了解</h2><ul>
<li>技术营销：通过基础数据分析，找到赋能新方法</li>
<li>基础研发：如何让数据更加适合的展现</li>
<li>产品研发：如何研发用用户不易察觉的方式解决用户痛点的产品</li>
<li>内部研发：研发如何提高开发效率的工具</li>
</ul>
<h2 id="技术栈了解"><a href="#技术栈了解" class="headerlink" title="技术栈了解"></a>技术栈了解</h2><p><strong>Unix/Linux</strong></p>
<p>后端必须掌握的操作系统。<br>建议的书籍：《Linux编程》《Unix环境高级编程》</p>
<p><strong>网络编程</strong></p>
<p>建议书籍：《Unix网络编程》《TCP/IP协议详解》</p>
<p><strong>脚本语言</strong><br>PHP、Python深入学习。</p>
<p><strong>数据库</strong></p>
<p>无论是关系型数据库还是非关系型数据库，都是必须要吃透牢牢掌握的东西</p>
<h2 id="工作使命感"><a href="#工作使命感" class="headerlink" title="工作使命感"></a>工作使命感</h2><p>互联网的技术日新月异的目标就是让人们更加方面的获取一切，享受科技带来的便利；</p>
<p>不可否认互联网技术同样是一把双刃剑，人们在低成本享受的同时，同时也会出现键盘侠、恶意抹黑、舆论控制等让社会阴暗面放大的趋势。</p>
<p>如同微博让人们无所不谈，同时也会有水军，造谣；大疆无人机让我们获得前所未有的影像视角，同时也被用于装备军队送上战场。</p>
<p>在致力于互联网技术和产品不断发展的同时，同时还需要致力于让技术和产品如何正确地服务于人，而避免用于歧途。</p>
<p><em>数据亦然，发掘数据蕴含的价值创造正能量价值，尽所能。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;为找工作而准备着&quot;&gt;&lt;a href=&quot;#为找工作而准备着&quot; class=&quot;headerlink&quot; title=&quot;为找工作而准备着&quot;&gt;&lt;/a&gt;为找工作而准备着&lt;/h1
    
    </summary>
    
      <category term="job" scheme="http://lincentma.men/categories/job/"/>
    
    
      <category term="job" scheme="http://lincentma.men/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>在百度实习的日子</title>
    <link href="http://lincentma.men/internship_in_baidu.html"/>
    <id>http://lincentma.men/internship_in_baidu.html</id>
    <published>2017-06-17T08:57:10.000Z</published>
    <updated>2017-06-22T03:16:19.535Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="在百度实习的日子"><a href="#在百度实习的日子" class="headerlink" title="在百度实习的日子"></a>在百度实习的日子</h1><blockquote>
<p>转眼从百度离开回到了在学校的日子。也应该记录下自己在帝都，在百度的255天。</p>
</blockquote>
<h2 id="在百度糯米"><a href="#在百度糯米" class="headerlink" title="在百度糯米"></a>在百度糯米</h2><p>在百度糯米第一次接触了规范的开发流程，公司庞大的知识储备库，让自己如同海绵一样广泛吸水般吸收知识。有非常nice团队来让我迅速适应这样的开发环境，让我熟悉开发流程，带我一起和产品交流、和运营交流、和测试交流。</p>
<h2 id="在百度搜索"><a href="#在百度搜索" class="headerlink" title="在百度搜索"></a>在百度搜索</h2><p>在百度搜索我接触到了搜索是如何运转，自己尝试接触Sug的海量数据进行数据分析监控，第一次理解亲身理解大数据所蕴含的价值。<br>一次次的技术分享，让我更加深刻理解百度搜索里面的核心技术的深度，自己仍有很长的路要走。</p>
<h2 id="在百度"><a href="#在百度" class="headerlink" title="在百度"></a>在百度</h2><p>目前为止我见过最好的办公环境，nice的伙食，健身设备，班车交通，让我每个周末也来公司给自己充电。<br>每天的问好，晚上的坐上班车返回住所，每一天任务的完成带给自己的充实感让自己不断向前。<br>体验过996，体验过封闭开发，体验过部门内分享，体验过酸甜苦辣。<br>感谢百度，感谢曾经的同事，感谢让自己不断成长。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;在百度实习的日子&quot;&gt;&lt;a href=&quot;#在百度实习的日子&quot; class=&quot;headerlink&quot; title=&quot;在百度实习的日子&quot;&gt;&lt;/a&gt;在百度实习的日子&lt;/h1
    
    </summary>
    
      <category term="intern" scheme="http://lincentma.men/categories/intern/"/>
    
    
      <category term="intern" scheme="http://lincentma.men/tags/intern/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之重新初始化</title>
    <link href="http://lincentma.men/hexo_init.html"/>
    <id>http://lincentma.men/hexo_init.html</id>
    <published>2017-06-15T07:04:32.000Z</published>
    <updated>2017-06-25T18:25:43.666Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>站在巨人的肩膀上，搭建Hexo，事半功倍。但是巨人太多，选择好的巨人很重要，不然就不得其法，回到原点。</p>
<h2 id="Hexo参考文档"><a href="#Hexo参考文档" class="headerlink" title="Hexo参考文档"></a>Hexo参考文档</h2><ul>
<li>[NexT]:  <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a>    “NexT”</li>
<li>[NexT优化]:  <a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="external">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a></li>
</ul>
<h2 id="Hexo搭建问题记录"><a href="#Hexo搭建问题记录" class="headerlink" title="Hexo搭建问题记录"></a>Hexo搭建问题记录</h2><ul>
<li>多说评论替换</li>
<li>背景效果</li>
<li>腾讯云搭建Hexo</li>
</ul>
<h2 id="Hexo-性能优化"><a href="#Hexo-性能优化" class="headerlink" title="Hexo 性能优化"></a>Hexo 性能优化</h2><ul>
<li>[hexo博客进阶－性能优化]:  <a href="https://www.liuxinggang.com/2016-12-06-hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%8D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/" target="_blank" rel="external">https://www.liuxinggang.com/2016-12-06-hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%8D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</a></li>
</ul>
<p>自己更换电脑，没有保存Hexo的源文件，借此机会重新部署学习，完善自己的博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;站在巨人的肩膀上，搭建Hexo，事半功倍。但是巨人太多，选择好的巨人很重要，不然就不得其法，回到原点。&lt;/p&gt;
&lt;h2 id=&quot;Hexo参考文档&quot;&gt;&lt;a href=&quot;#Hex
    
    </summary>
    
      <category term="教程" scheme="http://lincentma.men/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://lincentma.men/tags/hexo/"/>
    
  </entry>
  
</feed>
